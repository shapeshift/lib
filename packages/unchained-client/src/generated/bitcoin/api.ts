/* tslint:disable */
/* eslint-disable */
/**
 * @shapeshiftoss/bitcoin-api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 6.10.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * Information about BTC network fee at a specific confirmation speed
 * @export
 * @interface BTCNetworkFee
 */
export interface BTCNetworkFee {
    /**
     * 
     * @type {number}
     * @memberof BTCNetworkFee
     */
    satsPerKiloByte: number;
    /**
     * 
     * @type {number}
     * @memberof BTCNetworkFee
     */
    blocksUntilConfirmation: number;
}
/**
 * Gets current network fee estimates for \'fast\', \'average\', and \'slow\' tx confirmation times
 * @export
 * @interface BTCNetworkFees
 */
export interface BTCNetworkFees {
    /**
     * 
     * @type {BTCNetworkFee}
     * @memberof BTCNetworkFees
     */
    fast?: BTCNetworkFee;
    /**
     * 
     * @type {BTCNetworkFee}
     * @memberof BTCNetworkFees
     */
    average?: BTCNetworkFee;
    /**
     * 
     * @type {BTCNetworkFee}
     * @memberof BTCNetworkFees
     */
    slow?: BTCNetworkFee;
}
/**
 * Contains info about a 400 Bad Request response
 * @export
 * @interface BadRequestError
 */
export interface BadRequestError {
    /**
     * 
     * @type {string}
     * @memberof BadRequestError
     */
    error: string;
}
/**
 * Contains additional Bitcoin specific account info
 * @export
 * @interface BitcoinAccount
 */
export interface BitcoinAccount {
    /**
     * 
     * @type {string}
     * @memberof BitcoinAccount
     */
    balance: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinAccount
     */
    unconfirmedBalance: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinAccount
     */
    pubkey: string;
    /**
     * List of associated addresses for an xpub
     * @type {Array<BitcoinAddress>}
     * @memberof BitcoinAccount
     */
    addresses?: Array<BitcoinAddress>;
    /**
     * The next unused receive address index for an xpub (change index 0)
     * @type {number}
     * @memberof BitcoinAccount
     */
    nextReceiveAddressIndex?: number;
    /**
     * The next unused change address index for an xpub (change index 1)
     * @type {number}
     * @memberof BitcoinAccount
     */
    nextChangeAddressIndex?: number;
}
/**
 * 
 * @export
 * @interface BitcoinAddress
 */
export interface BitcoinAddress {
    /**
     * 
     * @type {string}
     * @memberof BitcoinAddress
     */
    balance: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinAddress
     */
    pubkey: string;
}
/**
 * Contains info about a Bitcoin transaction
 * @export
 * @interface BitcoinTx
 */
export interface BitcoinTx {
    /**
     * 
     * @type {string}
     * @memberof BitcoinTx
     */
    txid: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTx
     */
    blockHash?: string;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTx
     */
    blockHeight?: number;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTx
     */
    timestamp?: number;
    /**
     * 
     * @type {Array<Vin>}
     * @memberof BitcoinTx
     */
    vin: Array<Vin>;
    /**
     * 
     * @type {Array<Vout>}
     * @memberof BitcoinTx
     */
    vout: Array<Vout>;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTx
     */
    confirmations: number;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTx
     */
    value: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTx
     */
    fee: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTx
     */
    hex: string;
}
/**
 * Contains info about Bitcoin transaction history
 * @export
 * @interface BitcoinTxHistory
 */
export interface BitcoinTxHistory {
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxHistory
     */
    cursor?: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxHistory
     */
    pubkey: string;
    /**
     * 
     * @type {Array<BitcoinTx>}
     * @memberof BitcoinTxHistory
     */
    txs: Array<BitcoinTx>;
}
/**
 * Contains Bitcoin specific transaction info as returned from the node
 * @export
 * @interface BitcoinTxSpecific
 */
export interface BitcoinTxSpecific {
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecific
     */
    txid: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecific
     */
    hash: string;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecific
     */
    version: number;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecific
     */
    size: number;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecific
     */
    vsize: number;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecific
     */
    weight: number;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecific
     */
    locktime: number;
    /**
     * 
     * @type {Array<BitcoinTxSpecificVin>}
     * @memberof BitcoinTxSpecific
     */
    vin: Array<BitcoinTxSpecificVin>;
    /**
     * 
     * @type {Array<BitcoinTxSpecificVout>}
     * @memberof BitcoinTxSpecific
     */
    vout: Array<BitcoinTxSpecificVout>;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecific
     */
    hex: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecific
     */
    blockhash: string;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecific
     */
    confirmations: number;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecific
     */
    time: number;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecific
     */
    blocktime: number;
}
/**
 * 
 * @export
 * @interface BitcoinTxSpecificScriptPubKey
 */
export interface BitcoinTxSpecificScriptPubKey {
    /**
     * 
     * @type {Array<string>}
     * @memberof BitcoinTxSpecificScriptPubKey
     */
    addresses: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecificScriptPubKey
     */
    type: string;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecificScriptPubKey
     */
    reqSigs: number;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecificScriptPubKey
     */
    hex: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecificScriptPubKey
     */
    asm: string;
}
/**
 * 
 * @export
 * @interface BitcoinTxSpecificScriptSig
 */
export interface BitcoinTxSpecificScriptSig {
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecificScriptSig
     */
    hex: string;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecificScriptSig
     */
    asm: string;
}
/**
 * 
 * @export
 * @interface BitcoinTxSpecificVin
 */
export interface BitcoinTxSpecificVin {
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecificVin
     */
    txinwitness?: string;
    /**
     * 
     * @type {BitcoinTxSpecificScriptSig}
     * @memberof BitcoinTxSpecificVin
     */
    scriptSig?: BitcoinTxSpecificScriptSig;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecificVin
     */
    coinbase?: string;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecificVin
     */
    sequence?: number;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecificVin
     */
    vout?: number;
    /**
     * 
     * @type {string}
     * @memberof BitcoinTxSpecificVin
     */
    txid?: string;
}
/**
 * 
 * @export
 * @interface BitcoinTxSpecificVout
 */
export interface BitcoinTxSpecificVout {
    /**
     * 
     * @type {BitcoinTxSpecificScriptPubKey}
     * @memberof BitcoinTxSpecificVout
     */
    scriptPubKey?: BitcoinTxSpecificScriptPubKey;
    /**
     * 
     * @type {number}
     * @memberof BitcoinTxSpecificVout
     */
    n?: number;
    /**
     * 
     * @type {string | number}
     * @memberof BitcoinTxSpecificVout
     */
    value?: string | number;
}
/**
 * Contains info about the running coinstack
 * @export
 * @interface Info
 */
export interface Info {
    /**
     * 
     * @type {string}
     * @memberof Info
     */
    network: string;
}
/**
 * Contains info about a 500 Internal Server Error response
 * @export
 * @interface InternalServerError
 */
export interface InternalServerError {
    /**
     * 
     * @type {string}
     * @memberof InternalServerError
     */
    message: string;
}
/**
 * Contains the serialized raw transaction hex
 * @export
 * @interface SendTxBody
 */
export interface SendTxBody {
    /**
     * 
     * @type {string}
     * @memberof SendTxBody
     */
    hex: string;
}
/**
 * Contains info about a transaction
 * @export
 * @interface Tx
 */
export interface Tx {
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    txid: string;
    /**
     * 
     * @type {string}
     * @memberof Tx
     */
    blockHash?: string;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    blockHeight?: number;
    /**
     * 
     * @type {number}
     * @memberof Tx
     */
    timestamp?: number;
}
/**
 * Contains info about an unspent transaction output
 * @export
 * @interface Utxo
 */
export interface Utxo {
    /**
     * 
     * @type {string}
     * @memberof Utxo
     */
    txid: string;
    /**
     * 
     * @type {number}
     * @memberof Utxo
     */
    vout: number;
    /**
     * 
     * @type {string}
     * @memberof Utxo
     */
    value: string;
    /**
     * 
     * @type {number}
     * @memberof Utxo
     */
    height?: number;
    /**
     * 
     * @type {number}
     * @memberof Utxo
     */
    confirmations: number;
    /**
     * 
     * @type {string}
     * @memberof Utxo
     */
    address?: string;
    /**
     * 
     * @type {string}
     * @memberof Utxo
     */
    path?: string;
    /**
     * 
     * @type {number}
     * @memberof Utxo
     */
    locktime?: number;
    /**
     * 
     * @type {boolean}
     * @memberof Utxo
     */
    coinbase?: boolean;
}
/**
 * Contains info about a 422 Validation Error response
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    message: ValidationErrorMessageEnum;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof ValidationError
     */
    details: { [key: string]: any; };
}

/**
    * @export
    * @enum {string}
    */
export enum ValidationErrorMessageEnum {
    ValidationFailed = 'Validation failed'
}

/**
 * Contains info about a Bitcoin transaction input
 * @export
 * @interface Vin
 */
export interface Vin {
    /**
     * 
     * @type {string}
     * @memberof Vin
     */
    txid: string;
    /**
     * 
     * @type {string}
     * @memberof Vin
     */
    vout: string;
    /**
     * 
     * @type {number}
     * @memberof Vin
     */
    sequence?: number;
    /**
     * 
     * @type {string}
     * @memberof Vin
     */
    coinbase?: string;
    /**
     * 
     * @type {VinScriptSig}
     * @memberof Vin
     */
    scriptSig: VinScriptSig;
    /**
     * 
     * @type {Array<string>}
     * @memberof Vin
     */
    addresses: Array<string>;
}
/**
 * 
 * @export
 * @interface VinScriptSig
 */
export interface VinScriptSig {
    /**
     * 
     * @type {string}
     * @memberof VinScriptSig
     */
    hex?: string;
    /**
     * 
     * @type {string}
     * @memberof VinScriptSig
     */
    asm?: string;
}
/**
 * Contains info about a Bitcoin transaction output
 * @export
 * @interface Vout
 */
export interface Vout {
    /**
     * 
     * @type {string | number}
     * @memberof Vout
     */
    value: string | number;
    /**
     * 
     * @type {number}
     * @memberof Vout
     */
    n: number;
    /**
     * 
     * @type {VoutScriptPubKey}
     * @memberof Vout
     */
    scriptPubKey: VoutScriptPubKey;
}
/**
 * 
 * @export
 * @interface VoutScriptPubKey
 */
export interface VoutScriptPubKey {
    /**
     * 
     * @type {Array<string>}
     * @memberof VoutScriptPubKey
     */
    addresses: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof VoutScriptPubKey
     */
    type?: string;
    /**
     * 
     * @type {string}
     * @memberof VoutScriptPubKey
     */
    hex?: string;
    /**
     * 
     * @type {string}
     * @memberof VoutScriptPubKey
     */
    asm?: string;
}

/**
 * V1Api - axios parameter creator
 * @export
 */
export const V1ApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get account details by address or xpub  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
         * @param {string} pubkey account address or xpub
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount: async (pubkey: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubkey' is not null or undefined
            assertParamExists('getAccount', 'pubkey', pubkey)
            const localVarPath = `/api/v1/account/{pubkey}`
                .replace(`{${"pubkey"}}`, encodeURIComponent(String(pubkey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get information about the running coinstack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Gets current network fee estimates for \'fast\', \'average\', and \'slow\' tx confirmation times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworkFees: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/v1/fees`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get transaction specific data directly from the node
         * @param {string} txid transaction hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction: async (txid: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'txid' is not null or undefined
            assertParamExists('getTransaction', 'txid', txid)
            const localVarPath = `/api/v1/transaction/{txid}`
                .replace(`{${"txid"}}`, encodeURIComponent(String(txid)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get transaction history by address or xpub
         * @param {string} pubkey account address or xpub
         * @param {string} [cursor] the cursor returned in previous query (base64 encoded json object with a \&#39;page\&#39; property)
         * @param {number} [pageSize] page size (10 by default)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxHistory: async (pubkey: string, cursor?: string, pageSize?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubkey' is not null or undefined
            assertParamExists('getTxHistory', 'pubkey', pubkey)
            const localVarPath = `/api/v1/account/{pubkey}/txs`
                .replace(`{${"pubkey"}}`, encodeURIComponent(String(pubkey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (cursor !== undefined) {
                localVarQueryParameter['cursor'] = cursor;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all unspent transaction outputs for an address or xpub  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
         * @param {string} pubkey account address or xpub
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUtxos: async (pubkey: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pubkey' is not null or undefined
            assertParamExists('getUtxos', 'pubkey', pubkey)
            const localVarPath = `/api/v1/account/{pubkey}/utxos`
                .replace(`{${"pubkey"}}`, encodeURIComponent(String(pubkey)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends raw transaction to be broadcast to the node.
         * @param {SendTxBody} sendTxBody serialized raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTx: async (sendTxBody: SendTxBody, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'sendTxBody' is not null or undefined
            assertParamExists('sendTx', 'sendTxBody', sendTxBody)
            const localVarPath = `/api/v1/send`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(sendTxBody, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * V1Api - functional programming interface
 * @export
 */
export const V1ApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = V1ApiAxiosParamCreator(configuration)
    return {
        /**
         * Get account details by address or xpub  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
         * @param {string} pubkey account address or xpub
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getAccount(pubkey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BitcoinAccount>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getAccount(pubkey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get information about the running coinstack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getInfo(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Info>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getInfo(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Gets current network fee estimates for \'fast\', \'average\', and \'slow\' tx confirmation times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getNetworkFees(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BTCNetworkFees>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getNetworkFees(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get transaction specific data directly from the node
         * @param {string} txid transaction hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTransaction(txid: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BitcoinTxSpecific>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTransaction(txid, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get transaction history by address or xpub
         * @param {string} pubkey account address or xpub
         * @param {string} [cursor] the cursor returned in previous query (base64 encoded json object with a \&#39;page\&#39; property)
         * @param {number} [pageSize] page size (10 by default)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTxHistory(pubkey: string, cursor?: string, pageSize?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BitcoinTxHistory>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTxHistory(pubkey, cursor, pageSize, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Get all unspent transaction outputs for an address or xpub  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
         * @param {string} pubkey account address or xpub
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUtxos(pubkey: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Utxo>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUtxos(pubkey, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Sends raw transaction to be broadcast to the node.
         * @param {SendTxBody} sendTxBody serialized raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sendTx(sendTxBody: SendTxBody, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.sendTx(sendTxBody, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * V1Api - factory interface
 * @export
 */
export const V1ApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = V1ApiFp(configuration)
    return {
        /**
         * Get account details by address or xpub  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
         * @param {string} pubkey account address or xpub
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getAccount(pubkey: string, options?: any): AxiosPromise<BitcoinAccount> {
            return localVarFp.getAccount(pubkey, options).then((request) => request(axios, basePath));
        },
        /**
         * Get information about the running coinstack
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getInfo(options?: any): AxiosPromise<Info> {
            return localVarFp.getInfo(options).then((request) => request(axios, basePath));
        },
        /**
         * Gets current network fee estimates for \'fast\', \'average\', and \'slow\' tx confirmation times
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getNetworkFees(options?: any): AxiosPromise<BTCNetworkFees> {
            return localVarFp.getNetworkFees(options).then((request) => request(axios, basePath));
        },
        /**
         * Get transaction specific data directly from the node
         * @param {string} txid transaction hash
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTransaction(txid: string, options?: any): AxiosPromise<BitcoinTxSpecific> {
            return localVarFp.getTransaction(txid, options).then((request) => request(axios, basePath));
        },
        /**
         * Get transaction history by address or xpub
         * @param {string} pubkey account address or xpub
         * @param {string} [cursor] the cursor returned in previous query (base64 encoded json object with a \&#39;page\&#39; property)
         * @param {number} [pageSize] page size (10 by default)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTxHistory(pubkey: string, cursor?: string, pageSize?: number, options?: any): AxiosPromise<BitcoinTxHistory> {
            return localVarFp.getTxHistory(pubkey, cursor, pageSize, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all unspent transaction outputs for an address or xpub  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
         * @param {string} pubkey account address or xpub
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUtxos(pubkey: string, options?: any): AxiosPromise<Array<Utxo>> {
            return localVarFp.getUtxos(pubkey, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends raw transaction to be broadcast to the node.
         * @param {SendTxBody} sendTxBody serialized raw transaction hex
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sendTx(sendTxBody: SendTxBody, options?: any): AxiosPromise<string> {
            return localVarFp.sendTx(sendTxBody, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getAccount operation in V1Api.
 * @export
 * @interface V1ApiGetAccountRequest
 */
export interface V1ApiGetAccountRequest {
    /**
     * account address or xpub
     * @type {string}
     * @memberof V1ApiGetAccount
     */
    readonly pubkey: string
}

/**
 * Request parameters for getTransaction operation in V1Api.
 * @export
 * @interface V1ApiGetTransactionRequest
 */
export interface V1ApiGetTransactionRequest {
    /**
     * transaction hash
     * @type {string}
     * @memberof V1ApiGetTransaction
     */
    readonly txid: string
}

/**
 * Request parameters for getTxHistory operation in V1Api.
 * @export
 * @interface V1ApiGetTxHistoryRequest
 */
export interface V1ApiGetTxHistoryRequest {
    /**
     * account address or xpub
     * @type {string}
     * @memberof V1ApiGetTxHistory
     */
    readonly pubkey: string

    /**
     * the cursor returned in previous query (base64 encoded json object with a \&#39;page\&#39; property)
     * @type {string}
     * @memberof V1ApiGetTxHistory
     */
    readonly cursor?: string

    /**
     * page size (10 by default)
     * @type {number}
     * @memberof V1ApiGetTxHistory
     */
    readonly pageSize?: number
}

/**
 * Request parameters for getUtxos operation in V1Api.
 * @export
 * @interface V1ApiGetUtxosRequest
 */
export interface V1ApiGetUtxosRequest {
    /**
     * account address or xpub
     * @type {string}
     * @memberof V1ApiGetUtxos
     */
    readonly pubkey: string
}

/**
 * Request parameters for sendTx operation in V1Api.
 * @export
 * @interface V1ApiSendTxRequest
 */
export interface V1ApiSendTxRequest {
    /**
     * serialized raw transaction hex
     * @type {SendTxBody}
     * @memberof V1ApiSendTx
     */
    readonly sendTxBody: SendTxBody
}

/**
 * V1Api - object-oriented interface
 * @export
 * @class V1Api
 * @extends {BaseAPI}
 */
export class V1Api extends BaseAPI {
    /**
     * Get account details by address or xpub  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
     * @param {V1ApiGetAccountRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getAccount(requestParameters: V1ApiGetAccountRequest, options?: any) {
        return V1ApiFp(this.configuration).getAccount(requestParameters.pubkey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get information about the running coinstack
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getInfo(options?: any) {
        return V1ApiFp(this.configuration).getInfo(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Gets current network fee estimates for \'fast\', \'average\', and \'slow\' tx confirmation times
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getNetworkFees(options?: any) {
        return V1ApiFp(this.configuration).getNetworkFees(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get transaction specific data directly from the node
     * @param {V1ApiGetTransactionRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getTransaction(requestParameters: V1ApiGetTransactionRequest, options?: any) {
        return V1ApiFp(this.configuration).getTransaction(requestParameters.txid, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get transaction history by address or xpub
     * @param {V1ApiGetTxHistoryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getTxHistory(requestParameters: V1ApiGetTxHistoryRequest, options?: any) {
        return V1ApiFp(this.configuration).getTxHistory(requestParameters.pubkey, requestParameters.cursor, requestParameters.pageSize, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get all unspent transaction outputs for an address or xpub  Examples 1. Bitcoin (address) 2. Bitcoin (xpub)
     * @param {V1ApiGetUtxosRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public getUtxos(requestParameters: V1ApiGetUtxosRequest, options?: any) {
        return V1ApiFp(this.configuration).getUtxos(requestParameters.pubkey, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends raw transaction to be broadcast to the node.
     * @param {V1ApiSendTxRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof V1Api
     */
    public sendTx(requestParameters: V1ApiSendTxRequest, options?: any) {
        return V1ApiFp(this.configuration).sendTx(requestParameters.sendTxBody, options).then((request) => request(this.axios, this.basePath));
    }
}


