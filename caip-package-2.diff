diff --git a/.jest/setEnvVars.js b/.jest/setEnvVars.js
deleted file mode 100644
index 01d1eb8..0000000
--- a/.jest/setEnvVars.js
+++ /dev/null
@@ -1 +0,0 @@
-process.env.NETWORK = 'mainnet'
diff --git a/jest.config.ts b/jest.config.ts
index 01bba62..b67cf93 100644
--- a/jest.config.ts
+++ b/jest.config.ts
@@ -129,7 +129,7 @@ export default {
   // runner: "jest-runner",
 
   // The paths to modules that run some code to configure or set up the testing environment before each test
-  setupFiles: ['<rootDir>/.jest/setEnvVars.js'],
+  // setupFiles: [],
 
   // A list of paths to modules that run some code to configure or set up the testing framework before each test
   // setupFilesAfterEnv: [],
diff --git a/packages/asset-service/src/generateAssetData/ethTokens/ethereum.ts b/packages/asset-service/src/generateAssetData/ethTokens/ethereum.ts
index 4c903c8..aa2f41b 100644
--- a/packages/asset-service/src/generateAssetData/ethTokens/ethereum.ts
+++ b/packages/asset-service/src/generateAssetData/ethTokens/ethereum.ts
@@ -1,4 +1,4 @@
-import { fromCAIP19 } from '@shapeshiftoss/caip'
+import { fromAssetId } from '@shapeshiftoss/caip'
 import { BaseAsset, TokenAsset } from '@shapeshiftoss/types'
 import axios from 'axios'
 import chunk from 'lodash/chunk'
@@ -43,7 +43,7 @@ export const addTokensToEth = async (): Promise<BaseAsset> => {
   for (const [i, batch] of tokenBatches.entries()) {
     console.info(`processing batch ${i + 1} of ${tokenBatches.length}`)
     const promises = batch.map(async (token) => {
-      const { chain } = fromCAIP19(token.assetId)
+      const { chain } = fromAssetId(token.assetId)
       const { info } = generateTrustWalletUrl({ chain, tokenId: token.tokenId })
       return axios.head(info) // return promise
     })
@@ -70,7 +70,7 @@ export const addTokensToEth = async (): Promise<BaseAsset> => {
         }
         return uniqueTokens[key] // token without modified icon
       } else {
-        const { chain } = fromCAIP19(uniqueTokens[key].assetId)
+        const { chain } = fromAssetId(uniqueTokens[key].assetId)
         const { icon } = generateTrustWalletUrl({ chain, tokenId: uniqueTokens[key].tokenId })
         return { ...uniqueTokens[key], icon }
       }
diff --git a/packages/asset-service/src/generateAssetData/ethTokens/foxy.ts b/packages/asset-service/src/generateAssetData/ethTokens/foxy.ts
index 1118370..e5863b1 100644
--- a/packages/asset-service/src/generateAssetData/ethTokens/foxy.ts
+++ b/packages/asset-service/src/generateAssetData/ethTokens/foxy.ts
@@ -1,4 +1,4 @@
-import { AssetNamespace, toCAIP2, toCAIP19 } from '@shapeshiftoss/caip'
+import { AssetNamespace, toAssetId, toChainId } from '@shapeshiftoss/caip'
 import { AssetDataSource, ChainTypes, NetworkTypes, TokenAsset } from '@shapeshiftoss/types'
 
 export const getFoxyToken = (): TokenAsset[] => {
@@ -8,20 +8,20 @@ export const getFoxyToken = (): TokenAsset[] => {
   const assetReference = '0xDc49108ce5C57bc3408c3A5E95F3d864eC386Ed3' // FOXy contract address
 
   const result: TokenAsset = {
-    assetId: toCAIP19({
+    assetId: toAssetId({
       chain,
       network,
       assetNamespace,
       assetReference
     }),
-    chainId: toCAIP2({ chain, network }),
-    caip19: toCAIP19({
+    chainId: toChainId({ chain, network }),
+    caip19: toAssetId({
       chain,
       network,
       assetNamespace,
       assetReference
     }),
-    caip2: toCAIP2({ chain, network }),
+    caip2: toChainId({ chain, network }),
     dataSource: AssetDataSource.CoinGecko,
     name: 'FOX Yieldy',
     precision: 18,
diff --git a/packages/asset-service/src/generateAssetData/ethTokens/uniswap.ts b/packages/asset-service/src/generateAssetData/ethTokens/uniswap.ts
index 3fd0f2c..cae7210 100644
--- a/packages/asset-service/src/generateAssetData/ethTokens/uniswap.ts
+++ b/packages/asset-service/src/generateAssetData/ethTokens/uniswap.ts
@@ -1,4 +1,4 @@
-import { AssetNamespace, toCAIP2, toCAIP19 } from '@shapeshiftoss/caip'
+import { AssetNamespace, toAssetId, toChainId } from '@shapeshiftoss/caip'
 import { AssetDataSource, ChainTypes, NetworkTypes, TokenAsset } from '@shapeshiftoss/types'
 import axios from 'axios'
 import lodash from 'lodash'
@@ -49,10 +49,10 @@ export async function getUniswapTokens(): Promise<TokenAsset[]> {
       return acc
     }
     const result: TokenAsset = {
-      assetId: toCAIP19({ chain, network, assetNamespace, assetReference }),
-      chainId: toCAIP2({ chain, network }),
-      caip19: toCAIP19({ chain, network, assetNamespace, assetReference }),
-      caip2: toCAIP2({ chain, network }),
+      assetId: toAssetId({ chain, network, assetNamespace, assetReference }),
+      chainId: toChainId({ chain, network }),
+      caip19: toAssetId({ chain, network, assetNamespace, assetReference }),
+      caip2: toChainId({ chain, network }),
       dataSource: AssetDataSource.CoinGecko,
       name: token.name,
       precision: token.decimals,
diff --git a/packages/asset-service/src/generateAssetData/ethTokens/yearnVaults.ts b/packages/asset-service/src/generateAssetData/ethTokens/yearnVaults.ts
index 9ea76ca..f257900 100644
--- a/packages/asset-service/src/generateAssetData/ethTokens/yearnVaults.ts
+++ b/packages/asset-service/src/generateAssetData/ethTokens/yearnVaults.ts
@@ -1,4 +1,4 @@
-import { AssetNamespace, toCAIP2, toCAIP19 } from '@shapeshiftoss/caip'
+import { AssetNamespace, toAssetId, toChainId } from '@shapeshiftoss/caip'
 import { AssetDataSource, ChainTypes, NetworkTypes, TokenAsset } from '@shapeshiftoss/types'
 import { Token, Vault } from '@yfi/sdk'
 import toLower from 'lodash/toLower'
@@ -21,21 +21,21 @@ export const getYearnVaults = async (): Promise<TokenAsset[]> => {
       sendSupport: true,
       symbol: vault.symbol,
       tokenId: toLower(vault.address),
-      chainId: toCAIP2({
+      chainId: toChainId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET
       }),
-      assetId: toCAIP19({
+      assetId: toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
         assetReference: vault.address
       }),
-      caip2: toCAIP2({
+      caip2: toChainId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET
       }),
-      caip19: toCAIP19({
+      caip19: toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
@@ -60,21 +60,21 @@ export const getIronBankTokens = async (): Promise<TokenAsset[]> => {
       sendSupport: true,
       symbol: token.symbol,
       tokenId: toLower(token.address),
-      chainId: toCAIP2({
+      chainId: toChainId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET
       }),
-      assetId: toCAIP19({
+      assetId: toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
         assetReference: token.address
       }),
-      caip2: toCAIP2({
+      caip2: toChainId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET
       }),
-      caip19: toCAIP19({
+      caip19: toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
@@ -99,21 +99,21 @@ export const getZapperTokens = async (): Promise<TokenAsset[]> => {
       sendSupport: true,
       symbol: token.symbol,
       tokenId: toLower(token.address),
-      chainId: toCAIP2({
+      chainId: toChainId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET
       }),
-      assetId: toCAIP19({
+      assetId: toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
         assetReference: token.address
       }),
-      caip2: toCAIP2({
+      caip2: toChainId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET
       }),
-      caip19: toCAIP19({
+      caip19: toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
@@ -138,21 +138,21 @@ export const getUnderlyingVaultTokens = async (): Promise<TokenAsset[]> => {
       sendSupport: true,
       symbol: token.symbol,
       tokenId: toLower(token.address),
-      chainId: toCAIP2({
+      chainId: toChainId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET
       }),
-      assetId: toCAIP19({
+      assetId: toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
         assetReference: token.address
       }),
-      caip2: toCAIP2({
+      caip2: toChainId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET
       }),
-      caip19: toCAIP19({
+      caip19: toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
diff --git a/packages/caip/src/chainId/caip2.test.ts b/packages/caip/src/chainId/caip2.test.ts
new file mode 100644
index 0000000..bb99b7e
--- /dev/null
+++ b/packages/caip/src/chainId/caip2.test.ts
@@ -0,0 +1,236 @@
+import { ChainTypes, NetworkTypes } from '@shapeshiftoss/types'
+
+import { fromChainId, isChainId, toChainId } from './chainId'
+
+describe('chainId', () => {
+  describe('toChainId', () => {
+    it('can turn CosmosHub mainnet to ChainId', () => {
+      const chain = ChainTypes.Cosmos
+      const network = NetworkTypes.COSMOSHUB_MAINNET
+      const result = toChainId({ chain, network })
+      expect(result).toEqual('cosmos:cosmoshub-4')
+    })
+
+    it('can turn CosmosHub testnet to ChainId', () => {
+      const chain = ChainTypes.Cosmos
+      const network = NetworkTypes.COSMOSHUB_VEGA
+      const result = toChainId({ chain, network })
+      expect(result).toEqual('cosmos:vega-testnet')
+    })
+
+    it('can turn Osmosis mainnet to ChainId', () => {
+      const chain = ChainTypes.Osmosis
+      const network = NetworkTypes.OSMOSIS_MAINNET
+      const result = toChainId({ chain, network })
+      expect(result).toEqual('cosmos:osmosis-1')
+    })
+
+    it('can turn Osmosis testnet to ChainId', () => {
+      const chain = ChainTypes.Osmosis
+      const network = NetworkTypes.OSMOSIS_TESTNET
+      const result = toChainId({ chain, network })
+      expect(result).toEqual('cosmos:osmo-testnet-1')
+    })
+
+    it('can turn Ethereum mainnet to ChainId', () => {
+      const chain = ChainTypes.Ethereum
+      const network = NetworkTypes.MAINNET
+      const result = toChainId({ chain, network })
+      expect(result).toEqual('eip155:1')
+    })
+
+    it('can turn Ethereum testnet to ChainId', () => {
+      const chain = ChainTypes.Ethereum
+      const network = NetworkTypes.ETH_ROPSTEN
+      const result = toChainId({ chain, network })
+      expect(result).toEqual('eip155:3')
+    })
+
+    it('can turn Bitcoin mainnet to ChainId', () => {
+      const chain = ChainTypes.Bitcoin
+      const network = NetworkTypes.MAINNET
+      const result = toChainId({ chain, network })
+      expect(result).toEqual('bip122:000000000019d6689c085ae165831e93')
+    })
+
+    it('can turn Bitcoin testnet to ChainId', () => {
+      const chain = ChainTypes.Bitcoin
+      const network = NetworkTypes.TESTNET
+      const result = toChainId({ chain, network })
+      expect(result).toEqual('bip122:000000000933ea01ad0ee984209779ba')
+    })
+
+    it('should throw an error for an invalid chain', () => {
+      // @ts-ignore
+      expect(() => toChainId({ chain: ChainTypes.Osmosis, network: NetworkTypes.MAINNET })).toThrow(
+        'unsupported'
+      )
+    })
+  })
+
+  describe('fromChainId', () => {
+    it('can turn Bitcoin mainnet to chain and network', () => {
+      const bitcoinChainId = 'bip122:000000000019d6689c085ae165831e93'
+      const { chain, network } = fromChainId(bitcoinChainId)
+      expect(chain).toEqual(ChainTypes.Bitcoin)
+      expect(network).toEqual(NetworkTypes.MAINNET)
+    })
+
+    it('can turn Bitcoin testnet to chain and network', () => {
+      const bitcoinChainId = 'bip122:000000000933ea01ad0ee984209779ba'
+      const { chain, network } = fromChainId(bitcoinChainId)
+      expect(chain).toEqual(ChainTypes.Bitcoin)
+      expect(network).toEqual(NetworkTypes.TESTNET)
+    })
+
+    it('throws with invalid Bitcoin namespace ChainId', () => {
+      const badBitcoinChainId = 'bip999:000000000933ea01ad0ee984209779ba'
+      expect(() => fromChainId(badBitcoinChainId)).toThrow('fromChainId: unsupported chain: bip999')
+    })
+
+    it('throws with invalid Bitcoin reference ChainId', () => {
+      const badBitcoinChainId = 'bip122:000000000xxxxxxxxxxxxxxxxxxxxxxx'
+      expect(() => fromChainId(badBitcoinChainId)).toThrow(
+        'fromChainId: unsupported bip122 network: 000000000xxxxxxxxxxxxxxxxxxxxxxx'
+      )
+    })
+
+    it('can turn CosmosHub mainnet to chain and network', () => {
+      const cosmosHubChainId = 'cosmos:cosmoshub-4'
+      const { chain, network } = fromChainId(cosmosHubChainId)
+      expect(chain).toEqual(ChainTypes.Cosmos)
+      expect(network).toEqual(NetworkTypes.COSMOSHUB_MAINNET)
+    })
+
+    it('can turn CosmosHub testnet to chain and network', () => {
+      const cosmosHubChainId = 'cosmos:vega-testnet'
+      const { chain, network } = fromChainId(cosmosHubChainId)
+      expect(chain).toEqual(ChainTypes.Cosmos)
+      expect(network).toEqual(NetworkTypes.COSMOSHUB_VEGA)
+    })
+
+    it('throws with invalid Cosmos namespace ChainId', () => {
+      const badCosmosChainId = 'cosmosssssssssss:cosmoshub-4'
+      expect(() => fromChainId(badCosmosChainId)).toThrow(
+        'fromChainId: unsupported chain: cosmosssssssssss'
+      )
+    })
+
+    it('throws with invalid Cosmos reference ChainId', () => {
+      const badCosmosChainId = 'cosmos:kek-testnet'
+      expect(() => fromChainId(badCosmosChainId)).toThrow(
+        'fromChainId: unsupported cosmos network: kek-testnet'
+      )
+    })
+
+    it('can turn Osmosis mainnet to chain and network', () => {
+      const osmosisChainId = 'cosmos:osmosis-1'
+      const { chain, network } = fromChainId(osmosisChainId)
+      expect(chain).toEqual(ChainTypes.Osmosis)
+      expect(network).toEqual(NetworkTypes.OSMOSIS_MAINNET)
+    })
+
+    it('can turn Osmosis testnet to chain and network', () => {
+      const osmosisChainId = 'cosmos:osmo-testnet-1'
+      const { chain, network } = fromChainId(osmosisChainId)
+      expect(chain).toEqual(ChainTypes.Osmosis)
+      expect(network).toEqual(NetworkTypes.OSMOSIS_TESTNET)
+    })
+
+    it('can turn Ethereum mainnet to chain and network', () => {
+      const ethereumChainId = 'eip155:1'
+      const { chain, network } = fromChainId(ethereumChainId)
+      expect(chain).toEqual(ChainTypes.Ethereum)
+      expect(network).toEqual(NetworkTypes.MAINNET)
+    })
+
+    it('throws with invalid Ethereum namespace ChainId', () => {
+      const badEthereumChainId = 'eip123:1'
+      expect(() => fromChainId(badEthereumChainId)).toThrow(
+        'fromChainId: unsupported chain: eip123'
+      )
+    })
+
+    it('throws with invalid Ethereum reference ChainId', () => {
+      const badEthereumChainId = 'eip155:999'
+      expect(() => fromChainId(badEthereumChainId)).toThrow(
+        'fromChainId: unsupported eip155 network: 999'
+      )
+    })
+
+    it('can turn Ethereum ropsten to chain and network', () => {
+      const ethereumChainId = 'eip155:3'
+      const { chain, network } = fromChainId(ethereumChainId)
+      expect(chain).toEqual(ChainTypes.Ethereum)
+      expect(network).toEqual(NetworkTypes.ETH_ROPSTEN)
+    })
+
+    it('can turn Ethereum rinkeby to chain and network', () => {
+      const ethereumChainId = 'eip155:4'
+      const { chain, network } = fromChainId(ethereumChainId)
+      expect(chain).toEqual(ChainTypes.Ethereum)
+      expect(network).toEqual(NetworkTypes.ETH_RINKEBY)
+    })
+
+    it('should throw when there is no network reference', () => {
+      expect(() => fromChainId('bip122')).toThrow('error parsing')
+      expect(() => fromChainId(':1')).toThrow('error parsing')
+      expect(() => fromChainId(':')).toThrow('error parsing')
+    })
+  })
+})
+
+describe('isChainId', () => {
+  it('throws on eip155 without a network reference', () => {
+    expect(() => isChainId('eip155')).toThrow()
+  })
+
+  it('validates eip155:1 mainnet as true', () => {
+    expect(isChainId('eip155:1')).toBe(true)
+  })
+
+  it('throws on eip155:2 invalid network reference', () => {
+    expect(() => isChainId('eip155:2')).toThrow()
+  })
+
+  it('validates ethereum testnets as true', () => {
+    expect(isChainId('eip155:3')).toBe(true)
+    expect(isChainId('eip155:4')).toBe(true)
+  })
+
+  it('validates bip122:000000000019d6689c085ae165831e93 mainnet as true', () => {
+    expect(isChainId('bip122:000000000019d6689c085ae165831e93')).toBe(true)
+  })
+
+  it('validates bip122:000000000933ea01ad0ee984209779ba testnet as true', () => {
+    expect(isChainId('bip122:000000000933ea01ad0ee984209779ba')).toBe(true)
+  })
+
+  it('throws on bip122 with the wrong network reference', () => {
+    expect(() => isChainId('bip122:1')).toThrow()
+  })
+
+  it('throws on bip122', () => {
+    // missing network
+    expect(() => isChainId('bip122')).toThrow()
+  })
+
+  it('throws on empty string', () => {
+    // missing network
+    expect(() => isChainId('')).toThrow()
+  })
+
+  it('should return true for cosmos', () => {
+    expect(isChainId('cosmos:cosmoshub-4')).toBe(true)
+    expect(isChainId('cosmos:vega-testnet')).toBe(true)
+  })
+
+  it('should return true for osmosis', () => {
+    expect(isChainId('cosmos:osmosis-1')).toBe(true)
+    expect(isChainId('cosmos:osmo-testnet-1')).toBe(true)
+  })
+
+  it('should throw for an unknown cosmos chain', () => {
+    expect(() => isChainId('cosmos:fakechain-1')).toThrow('invalid')
+  })
+})
diff --git a/packages/chain-adapters/src/ChainAdapterManager.ts b/packages/chain-adapters/src/ChainAdapterManager.ts
index b4f94f2..a867a9d 100644
--- a/packages/chain-adapters/src/ChainAdapterManager.ts
+++ b/packages/chain-adapters/src/ChainAdapterManager.ts
@@ -1,4 +1,4 @@
-import { CAIP2, isCAIP2 } from '@shapeshiftoss/caip'
+import { ChainId, isChainId } from '@shapeshiftoss/caip'
 import { ChainTypes } from '@shapeshiftoss/types'
 import * as unchained from '@shapeshiftoss/unchained-client'
 
@@ -115,9 +115,9 @@ export class ChainAdapterManager {
     return adapter as ChainAdapter<T>
   }
 
-  async byChainId(chainId: CAIP2) {
+  async byChainId(chainId: ChainId) {
     // this function acts like a validation function and throws if the check doesn't pass
-    isCAIP2(chainId)
+    isChainId(chainId)
 
     for (const [chain] of this.supported) {
       // byChain calls the factory function so we need to call it to create the instances
diff --git a/packages/chain-adapters/src/api.ts b/packages/chain-adapters/src/api.ts
index c3ea3b4..dbc4886 100644
--- a/packages/chain-adapters/src/api.ts
+++ b/packages/chain-adapters/src/api.ts
@@ -1,4 +1,4 @@
-import { CAIP2, ChainId } from '@shapeshiftoss/caip'
+import { ChainId } from '@shapeshiftoss/caip'
 import { BIP44Params, chainAdapters, ChainTypes, UtxoAccountType } from '@shapeshiftoss/types'
 
 export type ChainAdapter<T extends ChainTypes> = {
@@ -10,9 +10,9 @@ export type ChainAdapter<T extends ChainTypes> = {
   /**
    * @deprecated - use `getChainId()` instead
    */
-  getCaip2(): ChainId | CAIP2
+  getCaip2(): ChainId
 
-  getChainId(): ChainId | CAIP2
+  getChainId(): ChainId
   /**
    * Get the supported account types for an adapter
    * For UTXO coins, that's the list of UTXO account types
diff --git a/packages/chain-adapters/src/bitcoin/BitcoinChainAdapter.ts b/packages/chain-adapters/src/bitcoin/BitcoinChainAdapter.ts
index 50425ed..e1ae4da 100644
--- a/packages/chain-adapters/src/bitcoin/BitcoinChainAdapter.ts
+++ b/packages/chain-adapters/src/bitcoin/BitcoinChainAdapter.ts
@@ -1,4 +1,10 @@
-import { AssetNamespace, AssetReference, CAIP2, fromCAIP2, toCAIP19 } from '@shapeshiftoss/caip'
+import {
+  AssetNamespace,
+  AssetReference,
+  ChainId,
+  fromChainId,
+  toAssetId
+} from '@shapeshiftoss/caip'
 import {
   bip32ToAddressNList,
   BTCOutputAddressType,
@@ -41,7 +47,7 @@ export class ChainAdapter
     UtxoAccountType.P2pkh
   ]
 
-  protected readonly supportedChainIds: CAIP2[] = [
+  protected readonly supportedChainIds: ChainId[] = [
     'bip122:000000000019d6689c085ae165831e93',
     'bip122:000000000933ea01ad0ee984209779ba'
   ]
@@ -56,12 +62,12 @@ export class ChainAdapter
     } else {
       this.chainId = this.supportedChainIds[0]
     }
-    const { chain, network } = fromCAIP2(this.chainId)
+    const { chain, network } = fromChainId(this.chainId)
     if (chain !== ChainTypes.Bitcoin) {
       throw new Error('chainId must be a bitcoin chain type')
     }
     this.coinName = args.coinName
-    this.assetId = toCAIP19({
+    this.assetId = toAssetId({
       chain,
       network,
       assetNamespace: AssetNamespace.Slip44,
@@ -347,7 +353,7 @@ export class ChainAdapter
       { topic: 'txs', addresses },
       ({ data: tx }) => {
         const transfers = tx.transfers.map<chainAdapters.TxTransfer>((transfer) => ({
-          caip19: transfer.caip19,
+          caip19: transfer.assetId,
           from: transfer.from,
           to: transfer.to,
           type: getType(transfer.type),
@@ -359,10 +365,15 @@ export class ChainAdapter
           blockHash: tx.blockHash,
           blockHeight: tx.blockHeight,
           blockTime: tx.blockTime,
-          caip2: tx.caip2,
+          caip2: tx.chainId,
           chain: ChainTypes.Bitcoin,
           confirmations: tx.confirmations,
-          fee: tx.fee,
+          ...(tx.fee && {
+            fee: {
+              caip19: tx.fee.assetId,
+              value: tx.fee.value
+            }
+          }),
           status: getStatus(tx.status),
           tradeDetails: tx.trade,
           transfers,
diff --git a/packages/chain-adapters/src/cosmossdk/CosmosSdkBaseAdapter.ts b/packages/chain-adapters/src/cosmossdk/CosmosSdkBaseAdapter.ts
index 989860b..acb33e9 100644
--- a/packages/chain-adapters/src/cosmossdk/CosmosSdkBaseAdapter.ts
+++ b/packages/chain-adapters/src/cosmossdk/CosmosSdkBaseAdapter.ts
@@ -1,4 +1,4 @@
-import { AssetId, CAIP2, CAIP19, ChainId } from '@shapeshiftoss/caip'
+import { AssetId, ChainId } from '@shapeshiftoss/caip'
 import { CosmosSignTx } from '@shapeshiftoss/hdwallet-core'
 import { BIP44Params, chainAdapters, ChainTypes } from '@shapeshiftoss/types'
 import * as unchained from '@shapeshiftoss/unchained-client'
@@ -11,7 +11,7 @@ import { getStatus, getType, toRootDerivationPath } from '../utils'
 export type CosmosChainTypes = ChainTypes.Cosmos | ChainTypes.Osmosis
 
 export interface ChainAdapterArgs {
-  chainId?: ChainId | CAIP2
+  chainId?: ChainId
   providers: {
     http: unchained.cosmos.V1Api
     ws: unchained.ws.Client<unchained.cosmos.Tx>
@@ -35,8 +35,8 @@ const transformValidator = (
 })
 
 export abstract class CosmosSdkBaseAdapter<T extends CosmosChainTypes> implements IChainAdapter<T> {
-  protected readonly chainId: ChainId | CAIP2
-  protected readonly assetId: AssetId | CAIP19 // This is the CAIP19/AssetId for native token on the chain (ATOM/OSMO/etc)
+  protected readonly chainId: ChainId
+  protected readonly assetId: AssetId // This is the AssetId for native token on the chain (ATOM/OSMO/etc)
   protected readonly supportedChainIds: ChainId[]
   protected readonly coinName: string
   protected readonly providers: {
@@ -62,11 +62,11 @@ export abstract class CosmosSdkBaseAdapter<T extends CosmosChainTypes> implement
 
   abstract getType(): T
 
-  getChainId(): ChainId | CAIP2 {
+  getChainId(): ChainId {
     return this.chainId
   }
 
-  getCaip2(): ChainId | CAIP2 {
+  getCaip2(): ChainId {
     return this.chainId
   }
 
@@ -174,11 +174,16 @@ export abstract class CosmosSdkBaseAdapter<T extends CosmosChainTypes> implement
             chain: this.getType(),
             confirmations: parsedTx.confirmations,
             txid: parsedTx.txid,
-            fee: parsedTx.fee,
+            ...(parsedTx.fee && {
+              fee: {
+                caip19: parsedTx.fee.assetId,
+                value: parsedTx.fee.value
+              }
+            }),
             status: getStatus(parsedTx.status),
             tradeDetails: parsedTx.trade,
             transfers: parsedTx.transfers.map((transfer) => ({
-              caip19: transfer.caip19,
+              caip19: transfer.assetId,
               from: transfer.from,
               to: transfer.to,
               type: getType(transfer.type),
@@ -266,14 +271,19 @@ export abstract class CosmosSdkBaseAdapter<T extends CosmosChainTypes> implement
           blockHash: tx.blockHash,
           blockHeight: tx.blockHeight,
           blockTime: tx.blockTime,
-          caip2: tx.caip2,
+          caip2: tx.chainId,
           chain: this.getType(),
           confirmations: tx.confirmations,
-          fee: tx.fee,
+          ...(tx.fee && {
+            fee: {
+              caip19: tx.fee.assetId,
+              value: tx.fee.value
+            }
+          }),
           status: getStatus(tx.status),
           tradeDetails: tx.trade,
           transfers: tx.transfers.map((transfer) => ({
-            caip19: transfer.caip19,
+            caip19: transfer.assetId,
             from: transfer.from,
             to: transfer.to,
             type: getType(transfer.type),
diff --git a/packages/chain-adapters/src/cosmossdk/cosmos/CosmosChainAdapter.ts b/packages/chain-adapters/src/cosmossdk/cosmos/CosmosChainAdapter.ts
index 3024bf0..d2bc1e4 100644
--- a/packages/chain-adapters/src/cosmossdk/cosmos/CosmosChainAdapter.ts
+++ b/packages/chain-adapters/src/cosmossdk/cosmos/CosmosChainAdapter.ts
@@ -1,10 +1,10 @@
 import {
+  AssetId,
   AssetNamespace,
   AssetReference,
-  CAIP19,
   ChainReference,
-  fromCAIP2,
-  toCAIP19
+  fromChainId,
+  toAssetId
 } from '@shapeshiftoss/caip'
 import {
   bip32ToAddressNList,
@@ -23,7 +23,7 @@ import { ChainAdapterArgs, CosmosSdkBaseAdapter } from '../CosmosSdkBaseAdapter'
 export class ChainAdapter extends CosmosSdkBaseAdapter<ChainTypes.Cosmos> {
   protected readonly supportedChainIds = ['cosmos:cosmoshub-4', 'cosmos:vega-testnet']
   protected readonly chainId = this.supportedChainIds[0]
-  protected readonly assetId: CAIP19
+  protected readonly assetId: AssetId
   protected readonly CHAIN_VALIDATOR_PREFIX_MAPPING = {
     [ChainTypes.Cosmos]: 'cosmosvaloper'
   }
@@ -37,9 +37,9 @@ export class ChainAdapter extends CosmosSdkBaseAdapter<ChainTypes.Cosmos> {
   constructor(args: ChainAdapterArgs) {
     super(args)
 
-    const { chain, network } = fromCAIP2(this.chainId)
+    const { chain, network } = fromChainId(this.chainId)
 
-    this.assetId = toCAIP19({
+    this.assetId = toAssetId({
       chain,
       network,
       assetNamespace: AssetNamespace.Slip44,
diff --git a/packages/chain-adapters/src/cosmossdk/osmosis/OsmosisChainAdapter.ts b/packages/chain-adapters/src/cosmossdk/osmosis/OsmosisChainAdapter.ts
index 4c28d65..818cd61 100644
--- a/packages/chain-adapters/src/cosmossdk/osmosis/OsmosisChainAdapter.ts
+++ b/packages/chain-adapters/src/cosmossdk/osmosis/OsmosisChainAdapter.ts
@@ -1,4 +1,10 @@
-import { AssetNamespace, AssetReference, CAIP19, fromCAIP2, toCAIP19 } from '@shapeshiftoss/caip'
+import {
+  AssetId,
+  AssetNamespace,
+  AssetReference,
+  fromChainId,
+  toAssetId
+} from '@shapeshiftoss/caip'
 import { bip32ToAddressNList, OsmosisSignTx, supportsOsmosis } from '@shapeshiftoss/hdwallet-core'
 import { BIP44Params, chainAdapters, ChainTypes } from '@shapeshiftoss/types'
 
@@ -12,7 +18,7 @@ export class ChainAdapter
 {
   protected readonly supportedChainIds = ['cosmos:osmosis-1', 'cosmos:osmo-testnet-1']
   protected readonly chainId = this.supportedChainIds[0]
-  protected readonly assetId: CAIP19
+  protected readonly assetId: AssetId
 
   public static readonly defaultBIP44Params: BIP44Params = {
     purpose: 44,
@@ -23,9 +29,9 @@ export class ChainAdapter
   constructor(args: ChainAdapterArgs) {
     super(args)
 
-    const { chain, network } = fromCAIP2(this.chainId)
+    const { chain, network } = fromChainId(this.chainId)
 
-    this.assetId = toCAIP19({
+    this.assetId = toAssetId({
       chain,
       network,
       assetNamespace: AssetNamespace.Slip44,
diff --git a/packages/chain-adapters/src/ethereum/EthereumChainAdapter.ts b/packages/chain-adapters/src/ethereum/EthereumChainAdapter.ts
index 03715e2..e24a0a8 100644
--- a/packages/chain-adapters/src/ethereum/EthereumChainAdapter.ts
+++ b/packages/chain-adapters/src/ethereum/EthereumChainAdapter.ts
@@ -2,11 +2,10 @@ import { Contract } from '@ethersproject/contracts'
 import {
   AssetNamespace,
   AssetReference,
-  CAIP2,
   ChainId,
-  fromCAIP2,
-  fromCAIP19,
-  toCAIP19
+  fromAssetId,
+  fromChainId,
+  toAssetId
 } from '@shapeshiftoss/caip'
 import { bip32ToAddressNList, ETHSignTx, ETHWallet } from '@shapeshiftoss/hdwallet-core'
 import { BIP44Params, chainAdapters, ChainTypes } from '@shapeshiftoss/types'
@@ -33,7 +32,7 @@ export interface ChainAdapterArgs {
     http: unchained.ethereum.V1Api
     ws: unchained.ws.Client<unchained.ethereum.ParsedTx>
   }
-  chainId?: ChainId | CAIP2
+  chainId?: ChainId
 }
 
 async function getErc20Data(to: string, value: string, contractAddress?: string) {
@@ -54,12 +53,12 @@ export class ChainAdapter implements IChainAdapter<ChainTypes.Ethereum> {
     accountNumber: 0
   }
 
-  private readonly chainId: ChainId | CAIP2 = 'eip155:1'
+  private readonly chainId: ChainId = 'eip155:1'
 
   constructor(args: ChainAdapterArgs) {
     if (args.chainId) {
       try {
-        const { chain } = fromCAIP2(args.chainId)
+        const { chain } = fromChainId(args.chainId)
         if (chain !== ChainTypes.Ethereum) {
           throw new Error()
         }
@@ -78,18 +77,18 @@ export class ChainAdapter implements IChainAdapter<ChainTypes.Ethereum> {
   /**
    * @deprecated - use `getChainId()` instead
    */
-  getCaip2(): ChainId | CAIP2 {
+  getCaip2(): ChainId {
     return this.chainId
   }
 
-  getChainId(): ChainId | CAIP2 {
+  getChainId(): ChainId {
     return this.chainId
   }
 
   async getAccount(pubkey: string): Promise<chainAdapters.Account<ChainTypes.Ethereum>> {
     try {
       const caip = this.getCaip2()
-      const { chain, network } = fromCAIP2(caip)
+      const { chain, network } = fromChainId(caip)
       const { data } = await this.providers.http.getAccount({ pubkey })
 
       const balance = bnOrZero(data.balance).plus(bnOrZero(data.unconfirmedBalance))
@@ -97,7 +96,7 @@ export class ChainAdapter implements IChainAdapter<ChainTypes.Ethereum> {
       return {
         balance: balance.toString(),
         caip2: caip,
-        caip19: toCAIP19({
+        caip19: toAssetId({
           chain,
           network,
           assetNamespace: AssetNamespace.Slip44,
@@ -108,7 +107,7 @@ export class ChainAdapter implements IChainAdapter<ChainTypes.Ethereum> {
           nonce: data.nonce,
           tokens: data.tokens.map((token) => ({
             balance: token.balance,
-            caip19: toCAIP19({
+            caip19: toAssetId({
               chain,
               network,
               assetNamespace: getAssetNamespace(token.type),
@@ -173,7 +172,7 @@ export class ChainAdapter implements IChainAdapter<ChainTypes.Ethereum> {
         if (isErc20Send) {
           if (!erc20ContractAddress) throw new Error('no token address')
           const erc20Balance = account?.chainSpecific?.tokens?.find((token) => {
-            return fromCAIP19(token.caip19).assetReference === erc20ContractAddress.toLowerCase()
+            return fromAssetId(token.caip19).assetReference === erc20ContractAddress.toLowerCase()
           })?.balance
           if (!erc20Balance) throw new Error('no balance')
           tx.value = erc20Balance
@@ -269,7 +268,7 @@ export class ChainAdapter implements IChainAdapter<ChainTypes.Ethereum> {
     if (sendMax && isErc20Send && contractAddress) {
       const account = await this.getAccount(from)
       const erc20Balance = account?.chainSpecific?.tokens?.find((token) => {
-        const { assetReference } = fromCAIP19(token.caip19)
+        const { assetReference } = fromAssetId(token.caip19)
         return assetReference === contractAddress.toLowerCase()
       })?.balance
       if (!erc20Balance) throw new Error('no balance')
@@ -380,7 +379,7 @@ export class ChainAdapter implements IChainAdapter<ChainTypes.Ethereum> {
       { topic: 'txs', addresses: [address] },
       ({ data: tx }) => {
         const transfers = tx.transfers.map<chainAdapters.TxTransfer>((transfer) => ({
-          caip19: transfer.caip19,
+          caip19: transfer.assetId,
           from: transfer.from,
           to: transfer.to,
           type: getType(transfer.type),
@@ -392,10 +391,15 @@ export class ChainAdapter implements IChainAdapter<ChainTypes.Ethereum> {
           blockHash: tx.blockHash,
           blockHeight: tx.blockHeight,
           blockTime: tx.blockTime,
-          caip2: tx.caip2,
+          caip2: tx.chainId,
           chain: ChainTypes.Ethereum,
           confirmations: tx.confirmations,
-          fee: tx.fee,
+          ...(tx.fee && {
+            fee: {
+              caip19: tx.fee.assetId,
+              value: tx.fee.value
+            }
+          }),
           status: getStatus(tx.status),
           tradeDetails: tx.trade,
           transfers,
diff --git a/packages/chain-adapters/src/utxo/UTXOBaseAdapter.ts b/packages/chain-adapters/src/utxo/UTXOBaseAdapter.ts
index 9871c9f..9a29ea6 100644
--- a/packages/chain-adapters/src/utxo/UTXOBaseAdapter.ts
+++ b/packages/chain-adapters/src/utxo/UTXOBaseAdapter.ts
@@ -1,4 +1,4 @@
-import { AssetId, CAIP2, CAIP19, ChainId } from '@shapeshiftoss/caip'
+import { AssetId, ChainId } from '@shapeshiftoss/caip'
 import { bip32ToAddressNList, HDWallet, PublicKey } from '@shapeshiftoss/hdwallet-core'
 import { BIP44Params, chainAdapters, ChainTypes, UtxoAccountType } from '@shapeshiftoss/types'
 import * as unchained from '@shapeshiftoss/unchained-client'
@@ -26,7 +26,7 @@ export interface ChainAdapterArgs {
     ws: unchained.ws.Client<unchained.Tx>
   }
   coinName: string
-  chainId?: ChainId | CAIP2
+  chainId?: ChainId
 }
 
 /**
@@ -36,10 +36,10 @@ export interface ChainAdapterArgs {
  * `export type UTXOChainTypes = ChainTypes.Bitcoin | ChainTypes.Litecoin`
  */
 export abstract class UTXOBaseAdapter<T extends UTXOChainTypes> implements IChainAdapter<T> {
-  protected chainId: ChainId | CAIP2
-  protected assetId: AssetId | CAIP19
+  protected chainId: ChainId
+  protected assetId: AssetId
   protected coinName: string
-  protected readonly supportedChainIds: ChainId | CAIP2[]
+  protected readonly supportedChainIds: ChainId[]
   protected readonly providers: {
     http: unchained.bitcoin.V1Api
     ws: unchained.ws.Client<unchained.Tx>
@@ -86,22 +86,22 @@ export abstract class UTXOBaseAdapter<T extends UTXOChainTypes> implements IChai
   /**
    * @deprecated - use `getChainId()` instead
    */
-  getCaip2(): ChainId | CAIP2 {
+  getCaip2(): ChainId {
     return this.chainId
   }
 
   /**
    * @deprecated - use `getChainId()` instead
    */
-  getCaip19(): AssetId | CAIP19 {
+  getCaip19(): AssetId {
     return this.assetId
   }
 
-  getChainId(): ChainId | CAIP2 {
+  getChainId(): ChainId {
     return this.chainId
   }
 
-  getAssetId(): AssetId | CAIP19 {
+  getAssetId(): AssetId {
     return this.assetId
   }
 
diff --git a/packages/investor-foxy/README.md b/packages/investor-foxy/README.md
index 9922b09..059c957 100644
--- a/packages/investor-foxy/README.md
+++ b/packages/investor-foxy/README.md
@@ -12,10 +12,11 @@ yarn add @shapeshiftoss/investor-foxy
 
 ```javascript
 import { FoxyApi } from '@shapeshiftoss/investor-foxy'
+import { toChainId } from '@shapeshiftoss/caip'
 
 const api = new FoxyApi({
   adapter: await adapterManager.byChainId(
-    caip2.toCAIP2({ chain: ChainTypes.Ethereum, network: NetworkTypes.MAINNET })
+    toChainId({ chain: ChainTypes.Ethereum, network: NetworkTypes.MAINNET })
   ), // adapter is an ETH @shapeshiftoss/chain-adapters
   providerUrl: '<your eth node privider url>'
 })
@@ -59,7 +60,7 @@ For more in-depth examples, check out ./src/foxycli.ts
 ```javascript
 const api = new FoxyApi({
   adapter: await adapterManager.byChainId(
-    caip2.toCAIP2({ chain: ChainTypes.Ethereum, network: NetworkTypes.MAINNET })
+    toChainId({ chain: ChainTypes.Ethereum, network: NetworkTypes.MAINNET })
   ),
   providerUrl: 'https://dev-api.ethereum.shapeshift.com'
 })
diff --git a/packages/investor-foxy/src/api/api.ts b/packages/investor-foxy/src/api/api.ts
index b5aa12c..ef46316 100644
--- a/packages/investor-foxy/src/api/api.ts
+++ b/packages/investor-foxy/src/api/api.ts
@@ -1,5 +1,5 @@
 import { JsonRpcProvider } from '@ethersproject/providers'
-import { AssetNamespace, ChainReference, toCAIP19 } from '@shapeshiftoss/caip'
+import { AssetNamespace, ChainReference, toAssetId } from '@shapeshiftoss/caip'
 import { ChainAdapter } from '@shapeshiftoss/chain-adapters'
 import { ChainTypes, NetworkTypes, WithdrawType } from '@shapeshiftoss/types'
 import axios from 'axios'
@@ -1083,7 +1083,7 @@ export class FoxyApi {
     const assetNamespace = AssetNamespace.ERC20
     const assetReference = tokenContractAddress
     // foxy assetId
-    const assetId = toCAIP19({ chain, network, assetNamespace, assetReference })
+    const assetId = toAssetId({ chain, network, assetNamespace, assetReference })
 
     const results = await Promise.allSettled(
       events.map(async (event) => {
diff --git a/packages/investor-foxy/src/api/foxy-types.ts b/packages/investor-foxy/src/api/foxy-types.ts
index 5b8cd16..27b0af7 100644
--- a/packages/investor-foxy/src/api/foxy-types.ts
+++ b/packages/investor-foxy/src/api/foxy-types.ts
@@ -1,4 +1,4 @@
-import { CAIP19 } from '@shapeshiftoss/caip'
+import { AssetId } from '@shapeshiftoss/caip'
 import { HDWallet } from '@shapeshiftoss/hdwallet-core'
 import { BIP44Params, WithdrawType } from '@shapeshiftoss/types'
 import { BigNumber } from 'bignumber.js'
@@ -154,7 +154,7 @@ export type RebaseEvent = {
 }
 
 export type RebaseHistory = {
-  assetId: CAIP19
+  assetId: AssetId
   balanceDiff: string
   blockTime: number
 }
diff --git a/packages/investor-foxy/src/foxycli.ts b/packages/investor-foxy/src/foxycli.ts
index d75666f..7d33447 100644
--- a/packages/investor-foxy/src/foxycli.ts
+++ b/packages/investor-foxy/src/foxycli.ts
@@ -1,4 +1,4 @@
-import { toCAIP2 } from '@shapeshiftoss/caip'
+import { toChainId } from '@shapeshiftoss/caip'
 import { ChainAdapter, ChainAdapterManager } from '@shapeshiftoss/chain-adapters'
 import { NativeAdapterArgs, NativeHDWallet } from '@shapeshiftoss/hdwallet-native'
 import { ChainTypes, NetworkTypes, WithdrawType } from '@shapeshiftoss/types'
@@ -45,7 +45,7 @@ const main = async (): Promise<void> => {
 
   const api = new FoxyApi({
     adapter: (await adapterManager.byChainId(
-      toCAIP2({ chain: ChainTypes.Ethereum, network: NetworkTypes.MAINNET })
+      toChainId({ chain: ChainTypes.Ethereum, network: NetworkTypes.MAINNET })
     )) as ChainAdapter<ChainTypes.Ethereum>,
     providerUrl: process.env.ARCHIVE_NODE || 'http://127.0.0.1:8545/',
     foxyAddresses
diff --git a/packages/market-service/src/coincap/coincap.test.ts b/packages/market-service/src/coincap/coincap.test.ts
index e7a5155..0dbed56 100644
--- a/packages/market-service/src/coincap/coincap.test.ts
+++ b/packages/market-service/src/coincap/coincap.test.ts
@@ -56,7 +56,7 @@ describe('coincap market service', () => {
         .mockResolvedValueOnce({ data: { data: [eth] } })
         .mockResolvedValue({ data: { data: [btc] } })
       const result = await coinMarketService.findAll()
-      expect(Object.keys(result)[0]).toEqual(adapters.coincapToCAIP19(btc.id))
+      expect(Object.keys(result)[0]).toEqual(adapters.coincapToAssetId(btc.id))
     })
 
     it('can handle api errors', async () => {
@@ -98,8 +98,8 @@ describe('coincap market service', () => {
         .mockResolvedValueOnce({ data: { data: [eth] } })
         .mockResolvedValue({ data: { data: [btc] } })
       const result = await coinMarketService.findAll()
-      const btcCaip19 = adapters.coincapToCAIP19('bitcoin')
-      const ethCaip19 = adapters.coincapToCAIP19('ethereum')
+      const btcCaip19 = adapters.coincapToAssetId('bitcoin')
+      const ethCaip19 = adapters.coincapToAssetId('ethereum')
       const [btcKey, ethKey] = Object.keys(result)
       expect(btcKey).toEqual(btcCaip19)
       expect(ethKey).toEqual(ethCaip19)
diff --git a/packages/market-service/src/coincap/coincap.ts b/packages/market-service/src/coincap/coincap.ts
index f316590..1c1fb54 100644
--- a/packages/market-service/src/coincap/coincap.ts
+++ b/packages/market-service/src/coincap/coincap.ts
@@ -51,7 +51,7 @@ export class CoinCapMarketService implements MarketService {
         .reduce((acc, cur) => {
           const { id } = cur
           try {
-            const caip19 = adapters.coincapToCAIP19(id)
+            const caip19 = adapters.coincapToAssetId(id)
             if (!caip19) return acc
             const curWithoutId = omit(cur, 'id') // don't leak this through to clients
             acc[caip19] = {
@@ -71,9 +71,9 @@ export class CoinCapMarketService implements MarketService {
   }
 
   findByCaip19 = async ({ caip19 }: MarketDataArgs): Promise<MarketData | null> => {
-    if (!adapters.CAIP19ToCoinCap(caip19)) return null
+    if (!adapters.assetIdToCoinCap(caip19)) return null
     try {
-      const id = adapters.CAIP19ToCoinCap(caip19)
+      const id = adapters.assetIdToCoinCap(caip19)
 
       const { data } = await axios.get(`${this.baseUrl}/assets/${id}`)
 
@@ -94,8 +94,8 @@ export class CoinCapMarketService implements MarketService {
     caip19,
     timeframe
   }: PriceHistoryArgs): Promise<HistoryData[]> => {
-    if (!adapters.CAIP19ToCoinCap(caip19)) return []
-    const id = adapters.CAIP19ToCoinCap(caip19)
+    if (!adapters.assetIdToCoinCap(caip19)) return []
+    const id = adapters.assetIdToCoinCap(caip19)
 
     const end = dayjs().startOf('minute')
     let start
diff --git a/packages/market-service/src/coingecko/coingecko.test.ts b/packages/market-service/src/coingecko/coingecko.test.ts
index 8aac092..54a0a62 100644
--- a/packages/market-service/src/coingecko/coingecko.test.ts
+++ b/packages/market-service/src/coingecko/coingecko.test.ts
@@ -84,7 +84,7 @@ describe('coingecko market service', () => {
     it('can sort by market cap', async () => {
       mockedAxios.get.mockResolvedValueOnce({ data: [btc] }).mockResolvedValue({ data: [eth] })
       const result = await coinGeckoMarketService.findAll()
-      expect(Object.keys(result)[0]).toEqual(adapters.coingeckoToCAIP19(btc.id))
+      expect(Object.keys(result)[0]).toEqual(adapters.coingeckoToAssetId(btc.id))
     })
 
     it('can handle api errors', async () => {
@@ -129,8 +129,8 @@ describe('coingecko market service', () => {
     it('can map coingecko to caip ids', async () => {
       mockedAxios.get.mockResolvedValueOnce({ data: [btc] }).mockResolvedValue({ data: [eth] })
       const result = await coinGeckoMarketService.findAll()
-      const btcCaip19 = adapters.coingeckoToCAIP19('bitcoin')
-      const ethCaip19 = adapters.coingeckoToCAIP19('ethereum')
+      const btcCaip19 = adapters.coingeckoToAssetId('bitcoin')
+      const ethCaip19 = adapters.coingeckoToAssetId('ethereum')
       const [btcKey, ethKey] = Object.keys(result)
       expect(btcKey).toEqual(btcCaip19)
       expect(ethKey).toEqual(ethCaip19)
diff --git a/packages/market-service/src/coingecko/coingecko.ts b/packages/market-service/src/coingecko/coingecko.ts
index 83b27b9..6134ae1 100644
--- a/packages/market-service/src/coingecko/coingecko.ts
+++ b/packages/market-service/src/coingecko/coingecko.ts
@@ -1,4 +1,4 @@
-import { adapters, fromCAIP19 } from '@shapeshiftoss/caip'
+import { adapters, fromAssetId } from '@shapeshiftoss/caip'
 import {
   ChainTypes,
   FindAllMarketArgs,
@@ -67,7 +67,7 @@ export class CoinGeckoMarketService implements MarketService {
         .reduce((acc, cur) => {
           const { id } = cur
           try {
-            const caip19 = adapters.coingeckoToCAIP19(id)
+            const caip19 = adapters.coingeckoToAssetId(id)
             if (!caip19) return acc
             const curWithoutId = omit(cur, 'id') // don't leak this through to clients
             acc[caip19] = {
@@ -88,10 +88,10 @@ export class CoinGeckoMarketService implements MarketService {
 
   findByCaip19 = async ({ caip19 }: MarketDataArgs): Promise<MarketData | null> => {
     try {
-      if (!adapters.CAIP19ToCoingecko(caip19)) return null
-      const { chain, assetReference } = fromCAIP19(caip19)
+      if (!adapters.assetIdToCoingecko(caip19)) return null
+      const { chain, assetReference } = fromAssetId(caip19)
       const isToken = chain === ChainTypes.Ethereum && assetReference.startsWith('0x')
-      const id = isToken ? 'ethereum' : adapters.CAIP19ToCoingecko(caip19)
+      const id = isToken ? 'ethereum' : adapters.assetIdToCoingecko(caip19)
       const contractUrl = isToken ? `/contract/${assetReference}` : ''
 
       const { data }: { data: CoinGeckoAssetData } = await axios.get(
@@ -116,11 +116,11 @@ export class CoinGeckoMarketService implements MarketService {
     caip19,
     timeframe
   }: PriceHistoryArgs): Promise<HistoryData[]> => {
-    if (!adapters.CAIP19ToCoingecko(caip19)) return []
+    if (!adapters.assetIdToCoingecko(caip19)) return []
     try {
-      const { chain, assetReference } = fromCAIP19(caip19)
+      const { chain, assetReference } = fromAssetId(caip19)
       const isToken = chain === ChainTypes.Ethereum && assetReference.startsWith('0x')
-      const id = isToken ? 'ethereum' : adapters.CAIP19ToCoingecko(caip19)
+      const id = isToken ? 'ethereum' : adapters.assetIdToCoingecko(caip19)
       const contract = isToken ? `/contract/${assetReference}` : ''
 
       const end = dayjs().startOf('minute')
diff --git a/packages/market-service/src/osmosis/osmosis.test.ts b/packages/market-service/src/osmosis/osmosis.test.ts
index bc62fb4..090b40f 100644
--- a/packages/market-service/src/osmosis/osmosis.test.ts
+++ b/packages/market-service/src/osmosis/osmosis.test.ts
@@ -21,7 +21,7 @@ describe('osmosis market service', () => {
     it('should sort by market cap', async () => {
       mockedAxios.get.mockResolvedValueOnce({ data: [secretNetwork, ion, osmo] })
       const result = await osmosisMarketService.findAll()
-      expect(Object.keys(result)[0]).toEqual(adapters.osmosisToCAIP19(osmo.denom))
+      expect(Object.keys(result)[0]).toEqual(adapters.osmosisToAssetId(osmo.denom))
     })
 
     it('should handle api errors', async () => {
diff --git a/packages/market-service/src/osmosis/osmosis.ts b/packages/market-service/src/osmosis/osmosis.ts
index 10ce8d3..fcd0a88 100644
--- a/packages/market-service/src/osmosis/osmosis.ts
+++ b/packages/market-service/src/osmosis/osmosis.ts
@@ -25,7 +25,7 @@ export class OsmosisMarketService implements MarketService {
         .map((data) => data ?? []) // filter out rate limited results
         .sort((a, b) => (a.liquidity < b.liquidity ? 1 : -1))
         .reduce((acc, token) => {
-          const caip19 = adapters.osmosisToCAIP19(token.denom)
+          const caip19 = adapters.osmosisToAssetId(token.denom)
           if (!caip19) return acc
 
           acc[caip19] = {
@@ -45,10 +45,10 @@ export class OsmosisMarketService implements MarketService {
   }
 
   findByCaip19 = async ({ caip19 }: MarketDataArgs): Promise<MarketData | null> => {
-    if (!adapters.CAIP19ToOsmosis(caip19)) return null
+    if (!adapters.assetIdToOsmosis(caip19)) return null
 
     try {
-      const symbol = adapters.CAIP19ToOsmosis(caip19)
+      const symbol = adapters.assetIdToOsmosis(caip19)
       const { data }: { data: OsmosisMarketCap[] } = await axios.get(
         `${this.baseUrl}/tokens/v2/${symbol}`
       )
@@ -72,8 +72,8 @@ export class OsmosisMarketService implements MarketService {
     caip19,
     timeframe
   }: PriceHistoryArgs): Promise<HistoryData[]> => {
-    if (!adapters.CAIP19ToOsmosis(caip19)) return []
-    const symbol = adapters.CAIP19ToOsmosis(caip19)
+    if (!adapters.assetIdToOsmosis(caip19)) return []
+    const symbol = adapters.assetIdToOsmosis(caip19)
 
     let range
     let isV1
diff --git a/packages/market-service/src/yearn/yearn-tokens.test.ts b/packages/market-service/src/yearn/yearn-tokens.test.ts
index 0ae5161..e5994d3 100644
--- a/packages/market-service/src/yearn/yearn-tokens.test.ts
+++ b/packages/market-service/src/yearn/yearn-tokens.test.ts
@@ -1,4 +1,4 @@
-import { AssetNamespace, toCAIP19 } from '@shapeshiftoss/caip'
+import { AssetNamespace, toAssetId } from '@shapeshiftoss/caip'
 import { ChainTypes, NetworkTypes } from '@shapeshiftoss/types'
 
 import { YearnTokenMarketCapService } from './yearn-tokens'
@@ -68,13 +68,13 @@ describe('yearn token market service', () => {
 
     it('can map yearn to caip ids', async () => {
       const result = await yearnTokenMarketCapService.findAll()
-      const yvBtcCaip19 = toCAIP19({
+      const yvBtcCaip19 = toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
         assetReference: mockYearnTokenRestData[0].address.toLowerCase()
       })
-      const yvDaiCaip19 = toCAIP19({
+      const yvDaiCaip19 = toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
diff --git a/packages/market-service/src/yearn/yearn-tokens.ts b/packages/market-service/src/yearn/yearn-tokens.ts
index 808de37..6ec7bc8 100644
--- a/packages/market-service/src/yearn/yearn-tokens.ts
+++ b/packages/market-service/src/yearn/yearn-tokens.ts
@@ -1,4 +1,4 @@
-import { adapters, AssetNamespace, toCAIP19 } from '@shapeshiftoss/caip'
+import { adapters, AssetNamespace, toAssetId } from '@shapeshiftoss/caip'
 import {
   ChainTypes,
   FindAllMarketArgs,
@@ -56,7 +56,7 @@ export class YearnTokenMarketCapService implements MarketService {
       const tokens = uniqueTokens.slice(0, argsToUse.count)
 
       return tokens.reduce((acc, token) => {
-        const _caip19: string = toCAIP19({
+        const _caip19: string = toAssetId({
           chain: ChainTypes.Ethereum,
           network: NetworkTypes.MAINNET,
           assetNamespace: AssetNamespace.ERC20,
@@ -79,7 +79,7 @@ export class YearnTokenMarketCapService implements MarketService {
   }
 
   findByCaip19 = async ({ caip19: _caip19 }: MarketDataArgs): Promise<MarketData | null> => {
-    const address = adapters.CAIP19ToYearn(_caip19)
+    const address = adapters.assetIdToYearn(_caip19)
     if (!address) return null
     try {
       // the yearnSdk caches the response to all of these calls and returns the cache if found.
diff --git a/packages/market-service/src/yearn/yearn-vaults.test.ts b/packages/market-service/src/yearn/yearn-vaults.test.ts
index 19adcc4..5a841c6 100644
--- a/packages/market-service/src/yearn/yearn-vaults.test.ts
+++ b/packages/market-service/src/yearn/yearn-vaults.test.ts
@@ -1,4 +1,4 @@
-import { AssetNamespace, toCAIP19 } from '@shapeshiftoss/caip'
+import { AssetNamespace, toAssetId } from '@shapeshiftoss/caip'
 import { ChainTypes, HistoryTimeframe, NetworkTypes } from '@shapeshiftoss/types'
 
 import { YearnVaultMarketCapService } from './yearn-vaults'
@@ -37,7 +37,7 @@ describe('yearn market service', () => {
       const yvBTCAddress = '0x19D3364A399d251E894aC732651be8B0E4e85001'
       const result = await yearnVaultMarketCapService.findAll()
       expect(Object.keys(result)[0]).toEqual(
-        toCAIP19({
+        toAssetId({
           chain: ChainTypes.Ethereum,
           network: NetworkTypes.MAINNET,
           assetNamespace: AssetNamespace.ERC20,
@@ -72,13 +72,13 @@ describe('yearn market service', () => {
 
     it('can map yearn to caip ids', async () => {
       const result = await yearnVaultMarketCapService.findAll()
-      const yvBtcCaip19 = toCAIP19({
+      const yvBtcCaip19 = toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
         assetReference: mockYearnVaultRestData[0].address.toLowerCase()
       })
-      const yvDaiCaip19 = toCAIP19({
+      const yvDaiCaip19 = toAssetId({
         chain: ChainTypes.Ethereum,
         network: NetworkTypes.MAINNET,
         assetNamespace: AssetNamespace.ERC20,
diff --git a/packages/market-service/src/yearn/yearn-vaults.ts b/packages/market-service/src/yearn/yearn-vaults.ts
index b7a7695..f5ded50 100644
--- a/packages/market-service/src/yearn/yearn-vaults.ts
+++ b/packages/market-service/src/yearn/yearn-vaults.ts
@@ -1,4 +1,4 @@
-import { adapters, AssetNamespace, toCAIP19 } from '@shapeshiftoss/caip'
+import { adapters, AssetNamespace, toAssetId } from '@shapeshiftoss/caip'
 import {
   ChainTypes,
   FindAllMarketArgs,
@@ -54,7 +54,7 @@ export class YearnVaultMarketCapService implements MarketService {
             : -1
         )
         .reduce((acc, yearnItem) => {
-          const assetId = toCAIP19({
+          const assetId = toAssetId({
             chain: ChainTypes.Ethereum,
             network: NetworkTypes.MAINNET,
             assetNamespace: AssetNamespace.ERC20,
@@ -124,7 +124,7 @@ export class YearnVaultMarketCapService implements MarketService {
   }
 
   findByCaip19 = async ({ caip19: assetId }: MarketDataArgs): Promise<MarketData | null> => {
-    const id = adapters.CAIP19ToYearn(assetId)
+    const id = adapters.assetIdToYearn(assetId)
     if (!id) return null
     try {
       const vaults = await rateLimiter(() => this.yearnSdk.vaults.get([id]))
@@ -198,7 +198,7 @@ export class YearnVaultMarketCapService implements MarketService {
     caip19: assetId,
     timeframe
   }: PriceHistoryArgs): Promise<HistoryData[]> => {
-    const id = adapters.CAIP19ToYearn(assetId)
+    const id = adapters.assetIdToYearn(assetId)
     if (!id) return []
     try {
       let daysAgo
diff --git a/packages/swapper/src/api.ts b/packages/swapper/src/api.ts
index d647c9d..71de9ef 100644
--- a/packages/swapper/src/api.ts
+++ b/packages/swapper/src/api.ts
@@ -1,4 +1,4 @@
-import { CAIP19 } from '@shapeshiftoss/caip'
+import { AssetId } from '@shapeshiftoss/caip'
 import { HDWallet } from '@shapeshiftoss/hdwallet-core'
 import {
   ApprovalNeededOutput,
@@ -14,21 +14,21 @@ import {
   SwapperType
 } from '@shapeshiftoss/types'
 export type SupportedAssetInput = {
-  assetIds: CAIP19[]
+  assetIds: AssetId[]
 }
 
 export type ByPairInput = {
-  sellAssetId: CAIP19
-  buyAssetId: CAIP19
+  sellAssetId: AssetId
+  buyAssetId: AssetId
 }
 
 export type BuyAssetBySellIdInput = {
-  sellAssetId: CAIP19
-  assetIds: CAIP19[]
+  sellAssetId: AssetId
+  assetIds: AssetId[]
 }
 
 export type SupportedSellAssetsInput = {
-  assetIds: CAIP19[]
+  assetIds: AssetId[]
 }
 
 export type CommonTradeInput = {
@@ -157,10 +157,10 @@ export interface Swapper {
   /**
    * Get supported buyAssetId's by sellAssetId
    */
-  filterBuyAssetsBySellAssetId(args: BuyAssetBySellIdInput): CAIP19[]
+  filterBuyAssetsBySellAssetId(args: BuyAssetBySellIdInput): AssetId[]
 
   /**
    * Get supported sell assetIds
    */
-  filterAssetIdsBySellable(assetIds: CAIP19[]): CAIP19[]
+  filterAssetIdsBySellable(assetIds: AssetId[]): AssetId[]
 }
diff --git a/packages/swapper/src/swappers/test/TestSwapper.ts b/packages/swapper/src/swappers/test/TestSwapper.ts
index 8a1b941..bb63a8c 100644
--- a/packages/swapper/src/swappers/test/TestSwapper.ts
+++ b/packages/swapper/src/swappers/test/TestSwapper.ts
@@ -1,4 +1,4 @@
-import { CAIP19 } from '@shapeshiftoss/caip'
+import { AssetId } from '@shapeshiftoss/caip'
 import {
   ApprovalNeededOutput,
   Asset,
@@ -61,13 +61,13 @@ export class TestSwapper implements Swapper {
     throw new Error('TestSwapper: approveInfinite unimplemented')
   }
 
-  filterBuyAssetsBySellAssetId(args: BuyAssetBySellIdInput): CAIP19[] {
+  filterBuyAssetsBySellAssetId(args: BuyAssetBySellIdInput): AssetId[] {
     const { sellAssetId } = args
     if (!this.supportAssets.includes(sellAssetId)) return []
     return this.supportAssets
   }
 
-  filterAssetIdsBySellable(): CAIP19[] {
+  filterAssetIdsBySellable(): AssetId[] {
     return this.supportAssets
   }
 
diff --git a/packages/swapper/src/swappers/thorchain/ThorchainSwapper.ts b/packages/swapper/src/swappers/thorchain/ThorchainSwapper.ts
index 7694448..645780b 100644
--- a/packages/swapper/src/swappers/thorchain/ThorchainSwapper.ts
+++ b/packages/swapper/src/swappers/thorchain/ThorchainSwapper.ts
@@ -1,4 +1,4 @@
-import { CAIP19 } from '@shapeshiftoss/caip'
+import { AssetId } from '@shapeshiftoss/caip'
 import {
   ApprovalNeededOutput,
   Asset,
@@ -47,11 +47,11 @@ export class ThorchainSwapper implements Swapper {
     throw new Error('ThorchainSwapper: approveInfinite unimplemented')
   }
 
-  filterBuyAssetsBySellAssetId(): CAIP19[] {
+  filterBuyAssetsBySellAssetId(): AssetId[] {
     return []
   }
 
-  filterAssetIdsBySellable(): CAIP19[] {
+  filterAssetIdsBySellable(): AssetId[] {
     return []
   }
 
diff --git a/packages/swapper/src/swappers/zrx/ZrxSwapper.ts b/packages/swapper/src/swappers/zrx/ZrxSwapper.ts
index 4bd3b44..4f179f8 100644
--- a/packages/swapper/src/swappers/zrx/ZrxSwapper.ts
+++ b/packages/swapper/src/swappers/zrx/ZrxSwapper.ts
@@ -1,4 +1,4 @@
-import { CAIP19 } from '@shapeshiftoss/caip'
+import { AssetId } from '@shapeshiftoss/caip'
 import { ChainAdapterManager } from '@shapeshiftoss/chain-adapters'
 import {
   ApprovalNeededOutput,
@@ -100,13 +100,13 @@ export class ZrxSwapper implements Swapper {
     return ZrxApproveInfinite(this.deps, args)
   }
 
-  filterBuyAssetsBySellAssetId(args: BuyAssetBySellIdInput): CAIP19[] {
+  filterBuyAssetsBySellAssetId(args: BuyAssetBySellIdInput): AssetId[] {
     const { assetIds, sellAssetId } = args
     // TODO: pending changes to caip lib, we may want to import caip2 value instead.
     return assetIds.filter((id) => id.startsWith('eip155:1') && sellAssetId.startsWith('eip155:1'))
   }
 
-  filterAssetIdsBySellable(assetIds: CAIP19[]): CAIP19[] {
+  filterAssetIdsBySellable(assetIds: AssetId[]): AssetId[] {
     return assetIds.filter((id) => id.startsWith('eip155:1'))
   }
 }
diff --git a/packages/unchained-client/package.json b/packages/unchained-client/package.json
index 4aacb10..c3e3049 100644
--- a/packages/unchained-client/package.json
+++ b/packages/unchained-client/package.json
@@ -28,15 +28,15 @@
     "ws": "^8.3.0"
   },
   "peerDependencies": {
-    "@shapeshiftoss/caip": "^2.2.3",
+    "@shapeshiftoss/caip": "^2.5.0",
     "@shapeshiftoss/logger": "^1.1.2",
-    "@shapeshiftoss/types": "3.1.3"
+    "@shapeshiftoss/types": "^4.0.0"
   },
   "devDependencies": {
-    "@shapeshiftoss/caip": "^2.2.3",
+    "@shapeshiftoss/caip": "^2.5.0",
     "@shapeshiftoss/common-api": "^6.11.0",
     "@shapeshiftoss/logger": "^1.1.2",
-    "@shapeshiftoss/types": "3.1.3",
+    "@shapeshiftoss/types": "^4.0.0",
     "@types/ws": "^8.2.1"
   }
 }
diff --git a/packages/unchained-client/src/bitcoin/parser/__tests__/bitcoin.test.ts b/packages/unchained-client/src/bitcoin/parser/__tests__/bitcoin.test.ts
index 2450e24..d4b288f 100644
--- a/packages/unchained-client/src/bitcoin/parser/__tests__/bitcoin.test.ts
+++ b/packages/unchained-client/src/bitcoin/parser/__tests__/bitcoin.test.ts
@@ -3,7 +3,10 @@ import { TransactionParser } from '../index'
 import standardNoChange from './mockData/standardNoChange'
 import standardWithChange from './mockData/standardWithChange'
 
-const txParser = new TransactionParser({ rpcUrl: '' })
+const txParser = new TransactionParser({
+  rpcUrl: '',
+  chainId: 'bip122:000000000019d6689c085ae165831e93'
+})
 
 describe('parseTx', () => {
   it('should be able to parse standard send with no change mempool', async () => {
@@ -17,10 +20,8 @@ describe('parseTx', () => {
       confirmations: txMempool.confirmations,
       status: Status.Pending,
       address,
-      caip2: 'bip122:000000000019d6689c085ae165831e93',
       chainId: 'bip122:000000000019d6689c085ae165831e93',
       fee: {
-        caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
         assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
         value: '6528'
       },
@@ -29,7 +30,6 @@ describe('parseTx', () => {
           type: TransferType.Send,
           from: '1ALpDTSP3BmBYKDudG8sLmt9ppDRNwqunj',
           to: '1KcXirKZg5bNnwAKGCTDprwJXivtFyAQc7',
-          caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           totalValue: '12989718',
           components: [{ value: '12989718' }]
@@ -54,10 +54,8 @@ describe('parseTx', () => {
       confirmations: tx.confirmations,
       status: Status.Confirmed,
       address,
-      caip2: 'bip122:000000000019d6689c085ae165831e93',
       chainId: 'bip122:000000000019d6689c085ae165831e93',
       fee: {
-        caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
         assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
         value: '6528'
       },
@@ -66,7 +64,6 @@ describe('parseTx', () => {
           type: TransferType.Send,
           from: '1ALpDTSP3BmBYKDudG8sLmt9ppDRNwqunj',
           to: '1KcXirKZg5bNnwAKGCTDprwJXivtFyAQc7',
-          caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           totalValue: '12989718',
           components: [{ value: '12989718' }]
@@ -90,14 +87,12 @@ describe('parseTx', () => {
       confirmations: txMempool.confirmations,
       status: Status.Pending,
       address,
-      caip2: 'bip122:000000000019d6689c085ae165831e93',
       chainId: 'bip122:000000000019d6689c085ae165831e93',
       transfers: [
         {
           type: TransferType.Receive,
           to: '1KcXirKZg5bNnwAKGCTDprwJXivtFyAQc7',
           from: '1ALpDTSP3BmBYKDudG8sLmt9ppDRNwqunj',
-          caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           totalValue: '12983190',
           components: [{ value: '12983190' }]
@@ -122,14 +117,12 @@ describe('parseTx', () => {
       confirmations: tx.confirmations,
       status: Status.Confirmed,
       address,
-      caip2: 'bip122:000000000019d6689c085ae165831e93',
       chainId: 'bip122:000000000019d6689c085ae165831e93',
       transfers: [
         {
           type: TransferType.Receive,
           to: '1KcXirKZg5bNnwAKGCTDprwJXivtFyAQc7',
           from: '1ALpDTSP3BmBYKDudG8sLmt9ppDRNwqunj',
-          caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           totalValue: '12983190',
           components: [{ value: '12983190' }]
@@ -153,10 +146,8 @@ describe('parseTx', () => {
       confirmations: txMempool.confirmations,
       status: Status.Pending,
       address,
-      caip2: 'bip122:000000000019d6689c085ae165831e93',
       chainId: 'bip122:000000000019d6689c085ae165831e93',
       fee: {
-        caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
         assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
         value: '6112'
       },
@@ -165,7 +156,6 @@ describe('parseTx', () => {
           type: TransferType.Send,
           to: '1Ex6unDe3gt4twj8GDHTutUbKvvHzMPj3e',
           from: '19BJg2jSvz8pHiz7kKSgdp69iVV5CnAvzB',
-          caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           totalValue: '4098889',
           components: [{ value: '4098889' }]
@@ -174,7 +164,6 @@ describe('parseTx', () => {
           type: TransferType.Receive,
           to: '19BJg2jSvz8pHiz7kKSgdp69iVV5CnAvzB',
           from: '19BJg2jSvz8pHiz7kKSgdp69iVV5CnAvzB',
-          caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           totalValue: '3908177',
           components: [{ value: '3908177' }]
@@ -199,10 +188,8 @@ describe('parseTx', () => {
       confirmations: tx.confirmations,
       status: Status.Confirmed,
       address,
-      caip2: 'bip122:000000000019d6689c085ae165831e93',
       chainId: 'bip122:000000000019d6689c085ae165831e93',
       fee: {
-        caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
         assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
         value: '6112'
       },
@@ -211,7 +198,6 @@ describe('parseTx', () => {
           type: TransferType.Send,
           to: '1Ex6unDe3gt4twj8GDHTutUbKvvHzMPj3e',
           from: '19BJg2jSvz8pHiz7kKSgdp69iVV5CnAvzB',
-          caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           totalValue: '4098889',
           components: [{ value: '4098889' }]
@@ -220,7 +206,6 @@ describe('parseTx', () => {
           type: TransferType.Receive,
           to: '19BJg2jSvz8pHiz7kKSgdp69iVV5CnAvzB',
           from: '19BJg2jSvz8pHiz7kKSgdp69iVV5CnAvzB',
-          caip19: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           assetId: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
           totalValue: '3908177',
           components: [{ value: '3908177' }]
diff --git a/packages/unchained-client/src/bitcoin/parser/index.ts b/packages/unchained-client/src/bitcoin/parser/index.ts
index 8679215..057d674 100644
--- a/packages/unchained-client/src/bitcoin/parser/index.ts
+++ b/packages/unchained-client/src/bitcoin/parser/index.ts
@@ -1,40 +1,43 @@
 import { Tx as BlockbookTx } from '@shapeshiftoss/blockbook'
-import { AssetNamespace, AssetReference, toCAIP2, toCAIP19 } from '@shapeshiftoss/caip'
-import { ChainTypes } from '@shapeshiftoss/types'
+import {
+  AssetId,
+  AssetNamespace,
+  AssetReference,
+  ChainId,
+  fromChainId,
+  toAssetId
+} from '@shapeshiftoss/caip'
 import { BigNumber } from 'bignumber.js'
 
 import { Status, TransferType, Tx as ParsedTx } from '../../types'
 import { aggregateTransfer } from '../../utils'
-import { Network } from '../types'
-import { toNetworkType } from './utils'
 
 export interface TransactionParserArgs {
-  network?: Network
+  chainId: ChainId
   rpcUrl: string
 }
 
 export class TransactionParser {
-  network: Network
+  chainId: ChainId
+  assetId: AssetId
 
   constructor(args: TransactionParserArgs) {
-    this.network = args.network ?? 'mainnet'
-  }
+    this.chainId = args.chainId
 
-  async parse(tx: BlockbookTx, address: string): Promise<ParsedTx> {
-    const caip19Bitcoin = toCAIP19({
-      chain: ChainTypes.Bitcoin,
-      network: toNetworkType(this.network),
+    this.assetId = toAssetId({
+      ...fromChainId(this.chainId),
       assetNamespace: AssetNamespace.Slip44,
       assetReference: AssetReference.Bitcoin
     })
+  }
 
+  async parse(tx: BlockbookTx, address: string): Promise<ParsedTx> {
     const parsedTx: ParsedTx = {
       address,
       blockHash: tx.blockHash,
       blockHeight: tx.blockHeight,
       blockTime: tx.blockTime,
-      caip2: toCAIP2({ chain: ChainTypes.Bitcoin, network: toNetworkType(this.network) }),
-      chainId: toCAIP2({ chain: ChainTypes.Bitcoin, network: toNetworkType(this.network) }),
+      chainId: this.chainId,
       confirmations: tx.confirmations,
       status: tx.confirmations > 0 ? Status.Confirmed : Status.Pending,
       transfers: [],
@@ -49,7 +52,7 @@ export class TransactionParser {
           parsedTx.transfers = aggregateTransfer(
             parsedTx.transfers,
             TransferType.Send,
-            caip19Bitcoin,
+            this.assetId,
             vin.addresses?.[0] ?? '',
             tx.vout[0].addresses?.[0] ?? '',
             sendValue.toString(10)
@@ -59,7 +62,7 @@ export class TransactionParser {
         // network fee
         const fees = new BigNumber(tx.fees ?? 0)
         if (fees.gt(0)) {
-          parsedTx.fee = { caip19: caip19Bitcoin, assetId: caip19Bitcoin, value: fees.toString(10) }
+          parsedTx.fee = { assetId: this.assetId, value: fees.toString(10) }
         }
       }
     })
@@ -72,7 +75,7 @@ export class TransactionParser {
           parsedTx.transfers = aggregateTransfer(
             parsedTx.transfers,
             TransferType.Receive,
-            caip19Bitcoin,
+            this.assetId,
             tx.vin[0].addresses?.[0] ?? '',
             vout.addresses?.[0] ?? '',
             receiveValue.toString(10)
diff --git a/packages/unchained-client/src/bitcoin/parser/utils.ts b/packages/unchained-client/src/bitcoin/parser/utils.ts
deleted file mode 100644
index ac18a94..0000000
--- a/packages/unchained-client/src/bitcoin/parser/utils.ts
+++ /dev/null
@@ -1,14 +0,0 @@
-import { NetworkTypes } from '@shapeshiftoss/types'
-
-import { Network } from '../types'
-
-export const toNetworkType = (network: Network): NetworkTypes => {
-  switch (network) {
-    case 'mainnet':
-      return NetworkTypes.MAINNET
-    case 'testnet':
-      return NetworkTypes.TESTNET
-    default:
-      throw new Error('unsupported network')
-  }
-}
diff --git a/packages/unchained-client/src/cosmos/parser/__tests__/cosmos.test.ts b/packages/unchained-client/src/cosmos/parser/__tests__/cosmos.test.ts
index 90cf477..91a0fd9 100644
--- a/packages/unchained-client/src/cosmos/parser/__tests__/cosmos.test.ts
+++ b/packages/unchained-client/src/cosmos/parser/__tests__/cosmos.test.ts
@@ -24,10 +24,8 @@ describe('parseTx', () => {
       confirmations: tx.confirmations,
       status: Status.Confirmed,
       address,
-      caip2: 'cosmos:cosmoshub-4',
       chainId: 'cosmos:cosmoshub-4',
       fee: {
-        caip19: 'cosmos:cosmoshub-4/slip44:118',
         assetId: 'cosmos:cosmoshub-4/slip44:118',
         value: '2500'
       },
@@ -36,7 +34,6 @@ describe('parseTx', () => {
           type: TransferType.Send,
           from: address,
           to: 'cosmos14e25lpsedq863vgweqg4m9n0z28c203kfdlzmz',
-          caip19: 'cosmos:cosmoshub-4/slip44:118',
           assetId: 'cosmos:cosmoshub-4/slip44:118',
           totalValue: '2002965',
           components: [{ value: '2002965' }]
@@ -61,14 +58,12 @@ describe('parseTx', () => {
       confirmations: tx.confirmations,
       status: Status.Confirmed,
       address,
-      caip2: 'cosmos:cosmoshub-4',
       chainId: 'cosmos:cosmoshub-4',
       transfers: [
         {
           type: TransferType.Receive,
           from: 'cosmos1t5u0jfg3ljsjrh2m9e47d4ny2hea7eehxrzdgd',
           to: address,
-          caip19: 'cosmos:cosmoshub-4/slip44:118',
           assetId: 'cosmos:cosmoshub-4/slip44:118',
           totalValue: '2002965',
           components: [{ value: '2002965' }]
@@ -89,14 +84,12 @@ describe('parseTx', () => {
       blockHash: 'D8186504233B8AD92ED2799D88A16A38F706889A99F1AEC49A6EA96EC94AE4E7',
       blockHeight: 9636923,
       blockTime: 1645207449,
-      caip2: 'cosmos:cosmoshub-4',
       chainId: 'cosmos:cosmoshub-4',
       confirmations: 358801,
       status: Status.Confirmed,
       transfers: [
         {
           type: TransferType.Send,
-          caip19: 'cosmos:cosmoshub-4/slip44:118',
           assetId: 'cosmos:cosmoshub-4/slip44:118',
           from: 'cosmos179k2lz70rxvjrvvr65cynw9x5c8v3kftg46v05',
           to: 'cosmosvaloper1lzhlnpahvznwfv4jmay2tgaha5kmz5qxerarrl',
@@ -113,7 +106,6 @@ describe('parseTx', () => {
         value: `1920000`
       },
       fee: {
-        caip19: 'cosmos:cosmoshub-4/slip44:118',
         assetId: 'cosmos:cosmoshub-4/slip44:118',
         value: '6250'
       }
@@ -132,18 +124,15 @@ describe('parseTx', () => {
       blockHash: '140D9DEC3087EA26248B60559D9C044F649749E4483E8E1F30143A8E47E7FFE8',
       blockHeight: 9636932,
       blockTime: 1646429915,
-      caip2: 'cosmos:cosmoshub-4',
       chainId: 'cosmos:cosmoshub-4',
       confirmations: 229191,
       status: Status.Confirmed,
       fee: {
-        caip19: 'cosmos:cosmoshub-4/slip44:118',
         assetId: 'cosmos:cosmoshub-4/slip44:118',
         value: '6250'
       },
       transfers: [
         {
-          caip19: 'cosmos:cosmoshub-4/slip44:118',
           assetId: 'cosmos:cosmoshub-4/slip44:118',
           components: [
             {
@@ -180,7 +169,6 @@ describe('parseTx', () => {
       blockHash: 'C3B387CF51B0957D52A79CF5EB4E50665661AC9528C6A65501EB45DA3D3A4A49',
       blockHeight: 9636911,
       blockTime: 1646429755,
-      caip2: 'cosmos:cosmoshub-4',
       chainId: 'cosmos:cosmoshub-4',
       confirmations: 229341,
       status: Status.Confirmed,
@@ -192,12 +180,10 @@ describe('parseTx', () => {
         sourceValidator: 'cosmosvaloper1sjllsnramtg3ewxqwwrwjxfgc4n4ef9u2lcnj0',
         delegator: 'cosmos1fx4jwv3aalxqwmrpymn34l582lnehr3eqwuz9e',
         destinationValidator: 'cosmosvaloper156gqf9837u7d4c4678yt3rl4ls9c5vuursrrzf',
-        caip19: 'cosmos:cosmoshub-4/slip44:118',
         assetId: 'cosmos:cosmoshub-4/slip44:118',
         value: `500000`
       },
       fee: {
-        caip19: 'cosmos:cosmoshub-4/slip44:118',
         assetId: 'cosmos:cosmoshub-4/slip44:118',
         value: '6250'
       }
@@ -216,14 +202,12 @@ describe('parseTx', () => {
       blockHash: 'DFFDB4B083138492721673E6754FAE5533C8D2D0AFC1928E959CDBB464E20864',
       blockHeight: 9636957,
       blockTime: 1646430088,
-      caip2: 'cosmos:cosmoshub-4',
       chainId: 'cosmos:cosmoshub-4',
       confirmations: 229401,
       status: Status.Confirmed,
       transfers: [
         {
           type: TransferType.Receive,
-          caip19: 'cosmos:cosmoshub-4/slip44:118',
           assetId: 'cosmos:cosmoshub-4/slip44:118',
           from: 'cosmosvaloper1hdrlqvyjfy5sdrseecjrutyws9khtxxaux62l7',
           to: 'cosmos179k2lz70rxvjrvvr65cynw9x5c8v3kftg46v05',
@@ -237,11 +221,9 @@ describe('parseTx', () => {
         method: 'withdraw_delegator_reward',
         destinationValidator: 'cosmos179k2lz70rxvjrvvr65cynw9x5c8v3kftg46v05',
         value: '39447',
-        caip19: 'cosmos:cosmoshub-4/slip44:118',
         assetId: 'cosmos:cosmoshub-4/slip44:118'
       },
       fee: {
-        caip19: 'cosmos:cosmoshub-4/slip44:118',
         assetId: 'cosmos:cosmoshub-4/slip44:118',
         value: '7000'
       }
@@ -261,14 +243,12 @@ describe('parseTx', () => {
       blockHash: 'C09E8EA1D6CD85AE8CFC2CF90B5D02EF79742167F0A161580077D44149616C65',
       blockHeight: 8418140,
       blockTime: 1637387732,
-      caip2: 'cosmos:cosmoshub-4',
       chainId: 'cosmos:cosmoshub-4',
       confirmations: 1632185,
       status: Status.Confirmed,
       transfers: [
         {
           type: TransferType.Send,
-          caip19: 'cosmos:cosmoshub-4/slip44:118',
           assetId: 'cosmos:cosmoshub-4/slip44:118',
           from: 'cosmos1fx4jwv3aalxqwmrpymn34l582lnehr3eqwuz9e',
           to: 'osmo1fx4jwv3aalxqwmrpymn34l582lnehr3eg40jnt',
@@ -286,7 +266,6 @@ describe('parseTx', () => {
         method: 'ibc_send',
         ibcDestination: 'osmo1fx4jwv3aalxqwmrpymn34l582lnehr3eg40jnt',
         ibcSource: 'cosmos1fx4jwv3aalxqwmrpymn34l582lnehr3eqwuz9e',
-        caip19: 'cosmos:cosmoshub-4/slip44:118',
         assetId: 'cosmos:cosmoshub-4/slip44:118',
         value: '108444'
       }
@@ -307,14 +286,12 @@ it('should be able to parse an ibc receive tx', async () => {
     blockHash: '16C1E10CBF15AA0E2C147AA8473B691B0F1AE1800DC990A088E7643668A05BA2',
     blockHeight: 9636880,
     blockTime: 1646429517,
-    caip2: 'cosmos:cosmoshub-4',
     chainId: 'cosmos:cosmoshub-4',
     confirmations: 231594,
     status: Status.Confirmed,
     transfers: [
       {
         type: TransferType.Receive,
-        caip19: 'cosmos:cosmoshub-4/slip44:118',
         assetId: 'cosmos:cosmoshub-4/slip44:118',
         from: 'osmo1fx4jwv3aalxqwmrpymn34l582lnehr3eg40jnt',
         to: 'cosmos1fx4jwv3aalxqwmrpymn34l582lnehr3eqwuz9e',
@@ -332,7 +309,6 @@ it('should be able to parse an ibc receive tx', async () => {
       method: 'ibc_receive',
       ibcDestination: 'cosmos1fx4jwv3aalxqwmrpymn34l582lnehr3eqwuz9e',
       ibcSource: 'osmo1fx4jwv3aalxqwmrpymn34l582lnehr3eg40jnt',
-      caip19: 'cosmos:cosmoshub-4/slip44:118',
       assetId: 'cosmos:cosmoshub-4/slip44:118',
       value: '3230396'
     }
diff --git a/packages/unchained-client/src/cosmos/parser/index.ts b/packages/unchained-client/src/cosmos/parser/index.ts
index 9b5d6fa..b8901e5 100644
--- a/packages/unchained-client/src/cosmos/parser/index.ts
+++ b/packages/unchained-client/src/cosmos/parser/index.ts
@@ -3,8 +3,8 @@ import {
   AssetNamespace,
   AssetReference,
   ChainId,
-  fromCAIP2,
-  toCAIP19
+  fromChainId,
+  toAssetId
 } from '@shapeshiftoss/caip'
 import { BigNumber } from 'bignumber.js'
 
@@ -24,8 +24,8 @@ export class TransactionParser {
   constructor(args: TransactionParserArgs) {
     this.chainId = args.chainId
 
-    this.assetId = toCAIP19({
-      ...fromCAIP2(this.chainId),
+    this.assetId = toAssetId({
+      ...fromChainId(this.chainId),
       assetNamespace: AssetNamespace.Slip44,
       assetReference: AssetReference.Cosmos
     })
@@ -37,7 +37,6 @@ export class TransactionParser {
       blockHash: tx.blockHash,
       blockHeight: tx.blockHeight ?? -1,
       blockTime: tx.timestamp ?? Math.floor(Date.now() / 1000),
-      caip2: this.chainId,
       chainId: this.chainId,
       confirmations: tx.confirmations,
       status: tx.confirmations > 0 ? Status.Confirmed : Status.Pending, // TODO: handle failed case
@@ -59,7 +58,6 @@ export class TransactionParser {
       parsedTx.transfers = [
         {
           type: TransferType.Send,
-          caip19: this.assetId,
           assetId: this.assetId,
           from,
           to,
@@ -73,7 +71,6 @@ export class TransactionParser {
       parsedTx.transfers = [
         {
           type: TransferType.Receive,
-          caip19: this.assetId,
           assetId: this.assetId,
           from,
           to,
@@ -88,7 +85,7 @@ export class TransactionParser {
       // network fee
       const fees = new BigNumber(tx.fee.amount)
       if (fees.gt(0)) {
-        parsedTx.fee = { caip19: this.assetId, assetId: this.assetId, value: fees.toString(10) }
+        parsedTx.fee = { assetId: this.assetId, value: fees.toString(10) }
       }
     }
 
diff --git a/packages/unchained-client/src/cosmos/parser/utils.ts b/packages/unchained-client/src/cosmos/parser/utils.ts
index 858077e..367c1e8 100644
--- a/packages/unchained-client/src/cosmos/parser/utils.ts
+++ b/packages/unchained-client/src/cosmos/parser/utils.ts
@@ -30,7 +30,6 @@ const metaData = (msg: Message | undefined, assetId: string): TxMetadata | undef
         delegator: msg.origin,
         destinationValidator: msg.to,
         value: msg?.value?.amount,
-        caip19: assetId,
         assetId
       }
     case 'withdraw_delegator_reward':
@@ -39,7 +38,6 @@ const metaData = (msg: Message | undefined, assetId: string): TxMetadata | undef
         method: msg.type,
         destinationValidator: msg.to,
         value: msg?.value?.amount,
-        caip19: assetId,
         assetId
       }
     case 'ibc_send':
@@ -49,7 +47,6 @@ const metaData = (msg: Message | undefined, assetId: string): TxMetadata | undef
         method: msg.type,
         ibcDestination: msg.to,
         ibcSource: msg.from,
-        caip19: assetId,
         assetId,
         value: msg?.value?.amount
       }
diff --git a/packages/unchained-client/src/cosmos/types.ts b/packages/unchained-client/src/cosmos/types.ts
index 312a95b..ededed9 100644
--- a/packages/unchained-client/src/cosmos/types.ts
+++ b/packages/unchained-client/src/cosmos/types.ts
@@ -5,10 +5,6 @@ export interface TxMetadata extends Omit<StandardTxMetadata, 'parser'> {
   delegator?: string
   sourceValidator?: string
   destinationValidator?: string
-  /**
-   * @deprecated use 'assetId' instead
-   */
-  caip19?: string
   assetId?: string
   value?: string
   ibcDestination?: string
diff --git a/packages/unchained-client/src/ethereum/parser/__tests__/ethereum.test.ts b/packages/unchained-client/src/ethereum/parser/__tests__/ethereum.test.ts
index 144b1b4..4ea62c0 100644
--- a/packages/unchained-client/src/ethereum/parser/__tests__/ethereum.test.ts
+++ b/packages/unchained-client/src/ethereum/parser/__tests__/ethereum.test.ts
@@ -46,7 +46,7 @@ import zrxTradeEthToMatic from './mockData/zrxTradeEthToMatic'
 import zrxTradeTetherToKishu from './mockData/zrxTradeTetherToKishu'
 import zrxTradeTribeToEth from './mockData/zrxTradeTribeToEth'
 
-const txParser = new TransactionParser({ rpcUrl: '' })
+const txParser = new TransactionParser({ rpcUrl: '', chainId: 'eip155:1' })
 
 describe('parseTx', () => {
   describe('multiSig', () => {
@@ -55,7 +55,6 @@ describe('parseTx', () => {
       const address = '0x76DA1578aC163CA7ca4143B7dEAa428e85Db3042'
 
       const standardTransfer = {
-        caip19: 'eip155:1/slip44:60',
         assetId: 'eip155:1/slip44:60',
         components: [{ value: '1201235000000000000' }],
         from: '0x79fE68B3e4Bc2B91a4C8dfFb5317C7B8813d8Ae7',
@@ -71,7 +70,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: undefined,
@@ -95,7 +93,6 @@ describe('parseTx', () => {
         type: TradeType.Trade
       }
       const sellTransfer = {
-        caip19: 'eip155:1/slip44:60',
         assetId: 'eip155:1/slip44:60',
         components: [{ value: '295040000000000000' }],
         from: '0xCeb660E7623E8f8312B3379Df747c35f2217b595',
@@ -110,7 +107,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -119,7 +115,6 @@ describe('parseTx', () => {
         },
         status: Status.Confirmed,
         fee: {
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60',
           value: '1700235000000000'
         },
@@ -141,7 +136,6 @@ describe('parseTx', () => {
         type: TradeType.Trade
       }
       const sellTransfer = {
-        caip19: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
         assetId: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
         components: [{ value: '16598881497' }],
         from: '0x5a8C5afbCC1A58cCbe17542957b587F46828B38E',
@@ -157,7 +151,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -166,7 +159,6 @@ describe('parseTx', () => {
         },
         status: Status.Confirmed,
         fee: {
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60',
           value: '4700280000000000'
         },
@@ -188,7 +180,6 @@ describe('parseTx', () => {
         type: TradeType.Trade
       }
       const buyTransfer = {
-        caip19: 'eip155:1/slip44:60',
         assetId: 'eip155:1/slip44:60',
         components: [{ value: '1579727090000000000' }],
         from: '0xC145990E84155416144C532E31f89B840Ca8c2cE',
@@ -204,7 +195,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -230,7 +220,6 @@ describe('parseTx', () => {
         type: TradeType.Trade
       }
       const buyTransfer = {
-        caip19: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
         assetId: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
         components: [{ value: '47596471640' }],
         from: '0xC145990E84155416144C532E31f89B840Ca8c2cE',
@@ -246,7 +235,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -272,7 +260,6 @@ describe('parseTx', () => {
         type: TradeType.Refund
       }
       const buyTransfer = {
-        caip19: 'eip155:1/slip44:60',
         assetId: 'eip155:1/slip44:60',
         components: [{ value: '6412730000000000' }],
         from: '0xC145990E84155416144C532E31f89B840Ca8c2cE',
@@ -288,7 +275,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -315,7 +301,6 @@ describe('parseTx', () => {
         type: TradeType.Trade
       }
       const buyTransfer = {
-        caip19: 'eip155:1/slip44:60',
         assetId: 'eip155:1/slip44:60',
         components: [
           {
@@ -330,7 +315,6 @@ describe('parseTx', () => {
       }
 
       const sellTransfer = {
-        caip19: 'eip155:1/erc20:0xc7283b66eb1eb5fb86327f08e1b5816b0720212b',
         assetId: 'eip155:1/erc20:0xc7283b66eb1eb5fb86327f08e1b5816b0720212b',
         components: [
           {
@@ -350,7 +334,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -360,7 +343,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '8308480000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [sellTransfer, buyTransfer],
@@ -381,7 +363,6 @@ describe('parseTx', () => {
       }
 
       const buyTransfer = {
-        caip19: 'eip155:1/erc20:0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0',
         assetId: 'eip155:1/erc20:0x7d1afa7b718fb893db30a3abc0cfc608aacfebb0',
         components: [
           {
@@ -396,7 +377,6 @@ describe('parseTx', () => {
       }
 
       const sellTransfer = {
-        caip19: 'eip155:1/slip44:60',
         assetId: 'eip155:1/slip44:60',
         components: [
           {
@@ -416,7 +396,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -426,7 +405,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '19815285000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [sellTransfer, buyTransfer],
@@ -450,7 +428,6 @@ describe('parseTx', () => {
         type: TransferType.Receive,
         from: '0xF82d8Ec196Fb0D56c6B82a8B1870F09502A49F88',
         to: '0xb8b19c048296E086DaF69F54d48dE2Da444dB047',
-        caip19: 'eip155:1/erc20:0xa2b4c0af19cc16a6cfacce81f192b024d625817d',
         assetId: 'eip155:1/erc20:0xa2b4c0af19cc16a6cfacce81f192b024d625817d',
         totalValue: '9248567698016204727450',
         components: [{ value: '9248567698016204727450' }],
@@ -461,7 +438,6 @@ describe('parseTx', () => {
         type: TransferType.Send,
         from: '0xb8b19c048296E086DaF69F54d48dE2Da444dB047',
         to: '0x0d4a11d5EEaaC28EC3F61d100daF4d40471f1852',
-        caip19: 'eip155:1/erc20:0xdac17f958d2ee523a2206206994597c13d831ec7',
         assetId: 'eip155:1/erc20:0xdac17f958d2ee523a2206206994597c13d831ec7',
         totalValue: '45000000000',
         components: [{ value: '45000000000' }],
@@ -474,7 +450,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -484,7 +459,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '78183644000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [sellTransfer, buyTransfer],
@@ -508,7 +482,6 @@ describe('parseTx', () => {
         type: TransferType.Receive,
         from: '0xEBFb684dD2b01E698ca6c14F10e4f289934a54D6',
         to: address,
-        caip19: 'eip155:1/erc20:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
         assetId: 'eip155:1/erc20:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
         totalValue: '56639587020747520629',
         components: [{ value: '56639587020747520629' }],
@@ -519,7 +492,6 @@ describe('parseTx', () => {
         type: TransferType.Receive,
         from: '0xd3d2E2692501A5c9Ca623199D38826e513033a17',
         to: address,
-        caip19: 'eip155:1/erc20:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
         assetId: 'eip155:1/erc20:0x1f9840a85d5af5bf1d1762f925bdaddc4201f984',
         totalValue: '47448670568188553620',
         components: [{ value: '47448670568188553620' }],
@@ -530,7 +502,6 @@ describe('parseTx', () => {
         type: TransferType.Send,
         from: address,
         to: '0x6591c4BcD6D7A1eb4E537DA8B78676C1576Ba244',
-        caip19: 'eip155:1/erc20:0x0391d2021f89dc339f60fff84546ea23e337750f',
         assetId: 'eip155:1/erc20:0x0391d2021f89dc339f60fff84546ea23e337750f',
         totalValue: '53910224825217010944',
         components: [{ value: '53910224825217010944' }],
@@ -541,7 +512,6 @@ describe('parseTx', () => {
         type: TransferType.Send,
         from: address,
         to: '0xB17B1342579e4bcE6B6e9A426092EA57d33843D9',
-        caip19: 'eip155:1/erc20:0x0391d2021f89dc339f60fff84546ea23e337750f',
         assetId: 'eip155:1/erc20:0x0391d2021f89dc339f60fff84546ea23e337750f',
         totalValue: '46089775174782989056',
         components: [{ value: '46089775174782989056' }],
@@ -554,7 +524,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -564,7 +533,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '18399681000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [sellTransfer1, buyTransfer1, sellTransfer2, buyTransfer2],
@@ -587,7 +555,6 @@ describe('parseTx', () => {
         blockHeight: txMempool.blockHeight,
         blockTime: txMempool.blockTime,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: txMempool.confirmations,
         data: undefined,
@@ -597,7 +564,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             to: address,
             from: address,
-            caip19: 'eip155:1/slip44:60',
             assetId: 'eip155:1/slip44:60',
             totalValue: '503100000000000',
             components: [{ value: '503100000000000' }]
@@ -606,7 +572,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             to: address,
             from: address,
-            caip19: 'eip155:1/slip44:60',
             assetId: 'eip155:1/slip44:60',
             totalValue: '503100000000000',
             components: [{ value: '503100000000000' }]
@@ -629,14 +594,12 @@ describe('parseTx', () => {
         blockHeight: tx.blockHeight,
         blockTime: tx.blockTime,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: undefined,
         status: Status.Confirmed,
         fee: {
           value: '399000000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -644,7 +607,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: address,
             to: address,
-            caip19: 'eip155:1/slip44:60',
             assetId: 'eip155:1/slip44:60',
             totalValue: '503100000000000',
             components: [{ value: '503100000000000' }]
@@ -653,7 +615,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: address,
             to: address,
-            caip19: 'eip155:1/slip44:60',
             assetId: 'eip155:1/slip44:60',
             totalValue: '503100000000000',
             components: [{ value: '503100000000000' }]
@@ -675,7 +636,6 @@ describe('parseTx', () => {
         blockHeight: txMempool.blockHeight,
         blockTime: txMempool.blockTime,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: txMempool.confirmations,
         data: undefined,
@@ -685,7 +645,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: address,
             to: address,
-            caip19: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             assetId: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             totalValue: '1502080',
             components: [{ value: '1502080' }],
@@ -695,7 +654,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: address,
             to: address,
-            caip19: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             assetId: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             totalValue: '1502080',
             components: [{ value: '1502080' }],
@@ -719,14 +677,12 @@ describe('parseTx', () => {
         blockHeight: tx.blockHeight,
         blockTime: tx.blockTime,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: undefined,
         status: Status.Confirmed,
         fee: {
           value: '1011738000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -734,7 +690,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: address,
             to: address,
-            caip19: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             assetId: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             totalValue: '1502080',
             components: [{ value: '1502080' }],
@@ -744,7 +699,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: address,
             to: address,
-            caip19: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             assetId: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             totalValue: '1502080',
             components: [{ value: '1502080' }],
@@ -770,14 +724,12 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: undefined,
         status: Status.Confirmed,
         fee: {
           value: '1447243200000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: []
@@ -797,7 +749,6 @@ describe('parseTx', () => {
         blockHeight: txMempool.blockHeight,
         blockTime: txMempool.blockTime,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: txMempool.confirmations,
         data: {
@@ -810,7 +761,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: '0x6bF198c2B5c8E48Af4e876bc2173175b89b1DA0C',
             to: '0x470e8de2eBaef52014A47Cb5E6aF86884947F08c',
-            caip19: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             assetId: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             totalValue: '100000000000000000000',
             components: [{ value: '100000000000000000000' }],
@@ -825,7 +775,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: '0x6bF198c2B5c8E48Af4e876bc2173175b89b1DA0C',
             to: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',
-            caip19: 'eip155:1/slip44:60',
             assetId: 'eip155:1/slip44:60',
             totalValue: '42673718176645189',
             components: [{ value: '42673718176645189' }]
@@ -848,14 +797,12 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: undefined,
         status: Status.Confirmed,
         fee: {
           value: '26926494400000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -863,7 +810,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: '0x6bF198c2B5c8E48Af4e876bc2173175b89b1DA0C',
             to: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',
-            caip19: 'eip155:1/slip44:60',
             assetId: 'eip155:1/slip44:60',
             totalValue: '42673718176645189',
             components: [{ value: '42673718176645189' }]
@@ -872,7 +818,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: '0x6bF198c2B5c8E48Af4e876bc2173175b89b1DA0C',
             to: '0x470e8de2eBaef52014A47Cb5E6aF86884947F08c',
-            caip19: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             assetId: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             totalValue: '100000000000000000000',
             components: [{ value: '100000000000000000000' }],
@@ -882,7 +827,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: '0x0000000000000000000000000000000000000000',
             to: '0x6bF198c2B5c8E48Af4e876bc2173175b89b1DA0C',
-            caip19: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             assetId: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             totalValue: '1888842410762840601',
             components: [{ value: '1888842410762840601' }],
@@ -905,7 +849,6 @@ describe('parseTx', () => {
         blockHeight: txMempool.blockHeight,
         blockTime: txMempool.blockTime,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: txMempool.confirmations,
         data: {
@@ -918,7 +861,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: '0x6bF198c2B5c8E48Af4e876bc2173175b89b1DA0C',
             to: '0x470e8de2eBaef52014A47Cb5E6aF86884947F08c',
-            caip19: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             assetId: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             totalValue: '298717642142382954',
             components: [{ value: '298717642142382954' }],
@@ -942,14 +884,12 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: undefined,
         status: Status.Confirmed,
         fee: {
           value: '4082585000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -957,7 +897,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: '0x6bF198c2B5c8E48Af4e876bc2173175b89b1DA0C',
             to: '0x470e8de2eBaef52014A47Cb5E6aF86884947F08c',
-            caip19: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             assetId: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             totalValue: '298717642142382954',
             components: [{ value: '298717642142382954' }],
@@ -967,7 +906,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',
             to: '0x6bF198c2B5c8E48Af4e876bc2173175b89b1DA0C',
-            caip19: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             assetId: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             totalValue: '15785079906515930982',
             components: [{ value: '15785079906515930982' }],
@@ -977,7 +915,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: '0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D',
             to: '0x6bF198c2B5c8E48Af4e876bc2173175b89b1DA0C',
-            caip19: 'eip155:1/slip44:60',
             assetId: 'eip155:1/slip44:60',
             totalValue: '6761476182340434',
             components: [{ value: '6761476182340434' }]
@@ -1002,14 +939,12 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: undefined,
         status: Status.Confirmed,
         fee: {
           value: '2559843000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -1017,7 +952,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: '0x02FfdC5bfAbe5c66BE067ff79231585082CA5fe2',
             to: address,
-            caip19: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             assetId: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             totalValue: '1500000000000000000000',
             components: [{ value: '1500000000000000000000' }],
@@ -1041,7 +975,6 @@ describe('parseTx', () => {
         blockHeight: txMempool.blockHeight,
         blockTime: txMempool.blockTime,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: txMempool.confirmations,
         data: undefined,
@@ -1064,14 +997,12 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: undefined,
         status: Status.Confirmed,
         fee: {
           value: '4650509500000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -1079,7 +1010,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: address,
             to: '0xDd80E21669A664Bce83E3AD9a0d74f8Dad5D9E72',
-            caip19: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             assetId: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             totalValue: '99572547380794318',
             components: [{ value: '99572547380794318' }],
@@ -1102,7 +1032,6 @@ describe('parseTx', () => {
         blockHeight: txMempool.blockHeight,
         blockTime: txMempool.blockTime,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: txMempool.confirmations,
         data: undefined,
@@ -1125,14 +1054,12 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: undefined,
         status: Status.Confirmed,
         fee: {
           value: '6136186875000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -1140,7 +1067,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: '0xDd80E21669A664Bce83E3AD9a0d74f8Dad5D9E72',
             to: address,
-            caip19: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             assetId: 'eip155:1/erc20:0x470e8de2ebaef52014a47cb5e6af86884947f08c',
             totalValue: '531053586030903030',
             components: [{ value: '531053586030903030' }],
@@ -1150,7 +1076,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: '0xDd80E21669A664Bce83E3AD9a0d74f8Dad5D9E72',
             to: address,
-            caip19: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             assetId: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             totalValue: '317669338073988',
             components: [{ value: '317669338073988' }],
@@ -1176,7 +1101,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1186,7 +1110,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '4519526097650998',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: []
@@ -1206,7 +1129,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1216,7 +1138,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '18139009291874667',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -1224,7 +1145,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: address,
             to: SHAPE_SHIFT_ROUTER_CONTRACT,
-            caip19: 'eip155:1/erc20:0x514910771af9ca656af840dff83e8264ecf986ca',
             assetId: 'eip155:1/erc20:0x514910771af9ca656af840dff83e8264ecf986ca',
             totalValue: '999961394864662132',
             components: [{ value: '999961394864662132' }],
@@ -1234,7 +1154,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: '0x0000000000000000000000000000000000000000',
             to: address,
-            caip19: 'eip155:1/erc20:0x671a912c10bba0cfa74cfc2d6fba9ba1ed9530b2',
             assetId: 'eip155:1/erc20:0x671a912c10bba0cfa74cfc2d6fba9ba1ed9530b2',
             totalValue: '987002304279657611',
             components: [{ value: '987002304279657611' }],
@@ -1257,7 +1176,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1267,7 +1185,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '19460274119661600',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -1275,7 +1192,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             from: address,
             to: '0x0000000000000000000000000000000000000000',
-            caip19: 'eip155:1/erc20:0x671a912c10bba0cfa74cfc2d6fba9ba1ed9530b2',
             assetId: 'eip155:1/erc20:0x671a912c10bba0cfa74cfc2d6fba9ba1ed9530b2',
             totalValue: '493501152139828806',
             components: [{ value: '493501152139828806' }],
@@ -1285,7 +1201,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             from: '0x671a912C10bba0CFA74Cfc2d6Fba9BA1ed9530B2',
             to: address,
-            caip19: 'eip155:1/erc20:0x514910771af9ca656af840dff83e8264ecf986ca',
             assetId: 'eip155:1/erc20:0x514910771af9ca656af840dff83e8264ecf986ca',
             totalValue: '500482168225493862',
             components: [{ value: '500482168225493862' }],
@@ -1308,7 +1223,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1318,7 +1232,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '9099683709794574',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         transfers: [
@@ -1326,7 +1239,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             to: address,
             from: '0x0000000000000000000000000000000000000000',
-            caip19: 'eip155:1/erc20:0x5f18c75abdae578b483e5f43f12a39cf75b973a9',
             assetId: 'eip155:1/erc20:0x5f18c75abdae578b483e5f43f12a39cf75b973a9',
             totalValue: '9178352',
             components: [{ value: '9178352' }],
@@ -1336,7 +1248,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             to: '0x5f18C75AbDAe578b483E5F43f12a39cF75b973a9',
             from: address,
-            caip19: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             assetId: 'eip155:1/erc20:0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48',
             totalValue: '10000000',
             components: [{ value: '10000000' }],
@@ -1361,7 +1272,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1371,7 +1281,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '8343629232016788',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         trade: undefined,
@@ -1380,7 +1289,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             to: FOXY_STAKING_CONTRACT,
             from: address,
-            caip19: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             assetId: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             totalValue: '109548875260073394762',
             components: [{ value: '109548875260073394762' }],
@@ -1390,7 +1298,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             to: address,
             from: FOXY_STAKING_CONTRACT,
-            caip19: 'eip155:1/erc20:0xdc49108ce5c57bc3408c3a5e95f3d864ec386ed3',
             assetId: 'eip155:1/erc20:0xdc49108ce5c57bc3408c3a5e95f3d864ec386ed3',
             totalValue: '109548875260073394762',
             components: [{ value: '109548875260073394762' }],
@@ -1414,7 +1321,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1424,7 +1330,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '7586577934107040',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         trade: undefined,
@@ -1433,7 +1338,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             to: FOXY_STAKING_CONTRACT,
             from: address,
-            caip19: 'eip155:1/erc20:0xdc49108ce5c57bc3408c3a5e95f3d864ec386ed3',
             assetId: 'eip155:1/erc20:0xdc49108ce5c57bc3408c3a5e95f3d864ec386ed3',
             totalValue: '24292579090466512304',
             components: [{ value: '24292579090466512304' }],
@@ -1443,7 +1347,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             to: address,
             from: FOXY_STAKING_CONTRACT,
-            caip19: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             assetId: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             totalValue: '22438383781076552673',
             components: [{ value: '22438383781076552673' }],
@@ -1467,7 +1370,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1477,7 +1379,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '10348720598973963',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         trade: undefined,
@@ -1486,7 +1387,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             to: FOXY_STAKING_CONTRACT,
             from: address,
-            caip19: 'eip155:1/erc20:0xdc49108ce5c57bc3408c3a5e95f3d864ec386ed3',
             assetId: 'eip155:1/erc20:0xdc49108ce5c57bc3408c3a5e95f3d864ec386ed3',
             totalValue: '9885337259647255313',
             components: [{ value: '9885337259647255313' }],
@@ -1496,7 +1396,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             to: address,
             from: '0x8EC637Fe2800940C7959f9BAd4fE69e41225CD39',
-            caip19: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             assetId: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             totalValue: '9638203828156073931',
             components: [{ value: '9638203828156073931' }],
@@ -1520,7 +1419,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1530,7 +1428,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '4735850597827293',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         trade: undefined,
@@ -1539,7 +1436,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             to: address,
             from: FOXY_STAKING_CONTRACT,
-            caip19: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             assetId: 'eip155:1/erc20:0xc770eefad204b5180df6a14ee197d99d808ee52d',
             totalValue: '1200000000000000000000',
             components: [{ value: '1200000000000000000000' }],
@@ -1561,7 +1457,6 @@ describe('parseTx', () => {
       const contractAddress = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'
 
       const standardTransfer = {
-        caip19: 'eip155:1/slip44:60',
         assetId: 'eip155:1/slip44:60',
         components: [{ value: '30000000000000000' }],
         from: address,
@@ -1577,7 +1472,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1587,7 +1481,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '2161335000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         trade: undefined,
@@ -1596,7 +1489,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             to: address,
             from: contractAddress,
-            caip19: 'eip155:1/erc20:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
             assetId: 'eip155:1/erc20:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
             totalValue: '30000000000000000',
             components: [{ value: '30000000000000000' }],
@@ -1622,7 +1514,6 @@ describe('parseTx', () => {
       const contractAddress = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'
 
       const standardTransfer = {
-        caip19: 'eip155:1/slip44:60',
         assetId: 'eip155:1/slip44:60',
         components: [{ value: '3264000000000000' }],
         from: address,
@@ -1638,7 +1529,6 @@ describe('parseTx', () => {
         blockTime: tx2.blockTime,
         blockHash: tx2.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx2.confirmations,
         data: {
@@ -1648,7 +1538,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '1087028000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         trade: undefined,
@@ -1657,7 +1546,6 @@ describe('parseTx', () => {
             type: TransferType.Receive,
             to: address,
             from: contractAddress,
-            caip19: 'eip155:1/erc20:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
             assetId: 'eip155:1/erc20:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
             totalValue: '3264000000000000',
             components: [{ value: '3264000000000000' }],
@@ -1683,7 +1571,6 @@ describe('parseTx', () => {
       const contractAddress = '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2'
 
       const internalTransfer = {
-        caip19: 'eip155:1/slip44:60',
         assetId: 'eip155:1/slip44:60',
         components: [{ value: '100000000000000000' }],
         from: contractAddress,
@@ -1699,7 +1586,6 @@ describe('parseTx', () => {
         blockTime: tx.blockTime,
         blockHash: tx.blockHash,
         address,
-        caip2: 'eip155:1',
         chainId: 'eip155:1',
         confirmations: tx.confirmations,
         data: {
@@ -1709,7 +1595,6 @@ describe('parseTx', () => {
         status: Status.Confirmed,
         fee: {
           value: '1482223000000000',
-          caip19: 'eip155:1/slip44:60',
           assetId: 'eip155:1/slip44:60'
         },
         trade: undefined,
@@ -1718,7 +1603,6 @@ describe('parseTx', () => {
             type: TransferType.Send,
             to: contractAddress,
             from: address,
-            caip19: 'eip155:1/erc20:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
             assetId: 'eip155:1/erc20:0xc02aaa39b223fe8d0a0e5c4f27ead9083c756cc2',
             totalValue: '100000000000000000',
             components: [{ value: '100000000000000000' }],
diff --git a/packages/unchained-client/src/ethereum/parser/index.ts b/packages/unchained-client/src/ethereum/parser/index.ts
index 7c02858..c9f7186 100644
--- a/packages/unchained-client/src/ethereum/parser/index.ts
+++ b/packages/unchained-client/src/ethereum/parser/index.ts
@@ -1,32 +1,34 @@
 import { Tx as BlockbookTx } from '@shapeshiftoss/blockbook'
-import { AssetNamespace, AssetReference, toCAIP2, toCAIP19 } from '@shapeshiftoss/caip'
-import { ChainTypes } from '@shapeshiftoss/types'
+import {
+  AssetId,
+  AssetNamespace,
+  AssetReference,
+  ChainId,
+  fromChainId,
+  toAssetId
+} from '@shapeshiftoss/caip'
 import { BigNumber } from 'bignumber.js'
 import { ethers } from 'ethers'
 
 import { Status, Token, TransferType } from '../../types'
 import { aggregateTransfer, findAsyncSequential } from '../../utils'
-import { InternalTx, Network, ParsedTx, SubParser, TxSpecific } from '../types'
+import { InternalTx, ParsedTx, SubParser, TxSpecific } from '../types'
 import * as foxy from './foxy'
 import * as thor from './thor'
 import * as uniV2 from './uniV2'
-import {
-  getInternalMultisigAddress,
-  getSigHash,
-  SENDMULTISIG_SIG_HASH,
-  toNetworkType
-} from './utils'
+import { getInternalMultisigAddress, getSigHash, SENDMULTISIG_SIG_HASH } from './utils'
 import * as weth from './weth'
 import * as yearn from './yearn'
 import * as zrx from './zrx'
 
 export interface TransactionParserArgs {
-  network?: Network
+  chainId: ChainId
   rpcUrl: string
 }
 
 export class TransactionParser {
-  network: Network
+  chainId: ChainId
+  assetId: AssetId
 
   private readonly thor: thor.Parser
   private readonly uniV2: uniV2.Parser
@@ -37,16 +39,22 @@ export class TransactionParser {
   private readonly parsers: Array<SubParser>
 
   constructor(args: TransactionParserArgs) {
-    const provider = new ethers.providers.JsonRpcProvider(args.rpcUrl)
+    this.chainId = args.chainId
 
-    this.network = args.network ?? 'mainnet'
+    this.assetId = toAssetId({
+      ...fromChainId(this.chainId),
+      assetNamespace: AssetNamespace.Slip44,
+      assetReference: AssetReference.Ethereum
+    })
 
-    this.thor = new thor.Parser({ network: this.network, rpcUrl: args.rpcUrl })
-    this.uniV2 = new uniV2.Parser({ network: this.network, provider })
+    const provider = new ethers.providers.JsonRpcProvider(args.rpcUrl)
+
+    this.thor = new thor.Parser({ chainId: this.chainId, rpcUrl: args.rpcUrl })
+    this.uniV2 = new uniV2.Parser({ chainId: this.chainId, provider })
     this.zrx = new zrx.Parser()
-    this.yearn = new yearn.Parser({ provider, network: this.network })
+    this.yearn = new yearn.Parser({ provider, chainId: this.chainId })
     this.foxy = new foxy.Parser()
-    this.weth = new weth.Parser({ network: this.network, provider })
+    this.weth = new weth.Parser({ chainId: this.chainId, provider })
 
     this.parsers = [this.zrx, this.thor, this.uniV2, this.yearn, this.foxy, this.weth]
   }
@@ -79,8 +87,7 @@ export class TransactionParser {
       blockHash: tx.blockHash,
       blockHeight: tx.blockHeight,
       blockTime: tx.blockTime,
-      caip2: toCAIP2({ chain: ChainTypes.Ethereum, network: toNetworkType(this.network) }),
-      chainId: toCAIP2({ chain: ChainTypes.Ethereum, network: toNetworkType(this.network) }),
+      chainId: this.chainId,
       confirmations: tx.confirmations,
       status: TransactionParser.getStatus(tx),
       trade: contractParserResult?.trade,
@@ -108,12 +115,6 @@ export class TransactionParser {
     address: string,
     internalTxs?: Array<InternalTx>
   ) {
-    const caip19Ethereum = toCAIP19({
-      chain: ChainTypes.Ethereum,
-      network: toNetworkType(this.network),
-      assetNamespace: AssetNamespace.Slip44,
-      assetReference: AssetReference.Ethereum
-    })
     const sendAddress = tx.vin[0].addresses?.[0] ?? ''
     const receiveAddress = tx.vout[0].addresses?.[0] ?? ''
 
@@ -124,7 +125,7 @@ export class TransactionParser {
         parsedTx.transfers = aggregateTransfer(
           parsedTx.transfers,
           TransferType.Send,
-          caip19Ethereum,
+          this.assetId,
           sendAddress,
           receiveAddress,
           sendValue.toString(10)
@@ -134,7 +135,7 @@ export class TransactionParser {
       // network fee
       const fees = new BigNumber(tx.fees ?? 0)
       if (fees.gt(0)) {
-        parsedTx.fee = { caip19: caip19Ethereum, assetId: caip19Ethereum, value: fees.toString(10) }
+        parsedTx.fee = { assetId: this.assetId, value: fees.toString(10) }
       }
     }
 
@@ -145,7 +146,7 @@ export class TransactionParser {
         parsedTx.transfers = aggregateTransfer(
           parsedTx.transfers,
           TransferType.Receive,
-          caip19Ethereum,
+          this.assetId,
           sendAddress,
           receiveAddress,
           receiveValue.toString(10)
@@ -168,9 +169,8 @@ export class TransactionParser {
       }
 
       const transferArgs = [
-        toCAIP19({
-          chain: ChainTypes.Ethereum,
-          network: toNetworkType(this.network),
+        toAssetId({
+          ...fromChainId(this.chainId),
           assetNamespace: AssetNamespace.ERC20,
           assetReference: transfer.token
         }),
@@ -201,9 +201,8 @@ export class TransactionParser {
 
     internalTxs?.forEach((internalTx) => {
       const transferArgs = [
-        toCAIP19({
-          chain: ChainTypes.Ethereum,
-          network: toNetworkType(this.network),
+        toAssetId({
+          ...fromChainId(this.chainId),
           assetNamespace: AssetNamespace.Slip44,
           assetReference: AssetReference.Ethereum
         }),
diff --git a/packages/unchained-client/src/ethereum/parser/thor.ts b/packages/unchained-client/src/ethereum/parser/thor.ts
index 1a387da..4bc9445 100644
--- a/packages/unchained-client/src/ethereum/parser/thor.ts
+++ b/packages/unchained-client/src/ethereum/parser/thor.ts
@@ -1,8 +1,9 @@
 import { Tx as BlockbookTx } from '@shapeshiftoss/blockbook'
+import { ChainId } from '@shapeshiftoss/caip'
 import { ethers } from 'ethers'
 
 import { Dex, TradeType, TxParser } from '../../types'
-import { Network, SubParser, TxSpecific } from '../types'
+import { SubParser, TxSpecific } from '../types'
 import THOR_ABI from './abi/thor'
 import { THOR_ROUTER_CONTRACT_MAINNET, THOR_ROUTER_CONTRACT_ROPSTEN } from './constants'
 import { getSigHash, txInteractsWithContract } from './utils'
@@ -10,7 +11,7 @@ import { getSigHash, txInteractsWithContract } from './utils'
 const SWAP_TYPES = ['SWAP', '=', 's']
 
 export interface ParserArgs {
-  network: Network
+  chainId: ChainId
   rpcUrl: string
 }
 
@@ -24,11 +25,18 @@ export class Parser implements SubParser {
   }
 
   constructor(args: ParserArgs) {
-    // TODO: Router contract can change, use /inbound_addresses endpoint to determine current router contract
-    this.routerContract = {
-      mainnet: THOR_ROUTER_CONTRACT_MAINNET,
-      ropsten: THOR_ROUTER_CONTRACT_ROPSTEN
-    }[args.network]
+    // TODO: Router contract can change, use /inbound_addresses endpoint to determine current router contract.
+    // We will also need to know all past router contract addresses if we intend on using receive address as the means for detection
+    switch (args.chainId) {
+      case 'eip155:1':
+        this.routerContract = THOR_ROUTER_CONTRACT_MAINNET
+        break
+      case 'eip155:3':
+        this.routerContract = THOR_ROUTER_CONTRACT_ROPSTEN
+        break
+      default:
+        throw new Error('chainId is not supported. (supported chainIds: eip155:1, eip155:3)')
+    }
   }
 
   // detect address associated with transferOut internal transaction
diff --git a/packages/unchained-client/src/ethereum/parser/uniV2.ts b/packages/unchained-client/src/ethereum/parser/uniV2.ts
index 50e3a31..30f715f 100644
--- a/packages/unchained-client/src/ethereum/parser/uniV2.ts
+++ b/packages/unchained-client/src/ethereum/parser/uniV2.ts
@@ -1,24 +1,23 @@
 import { Tx as BlockbookTx } from '@shapeshiftoss/blockbook'
-import { AssetNamespace, toCAIP19 } from '@shapeshiftoss/caip'
-import { ChainTypes } from '@shapeshiftoss/types'
+import { AssetNamespace, ChainId, fromChainId, toAssetId } from '@shapeshiftoss/caip'
 import { ethers } from 'ethers'
 
 import { TransferType, TxParser } from '../../types'
-import { Network, SubParser, TxSpecific } from '../types'
+import { SubParser, TxSpecific } from '../types'
 import ERC20_ABI from './abi/erc20'
 import UNIV2_ABI from './abi/uniV2'
 import { UNI_V2_ROUTER_CONTRACT, WETH_CONTRACT_MAINNET, WETH_CONTRACT_ROPSTEN } from './constants'
-import { getSigHash, toNetworkType, txInteractsWithContract } from './utils'
+import { getSigHash, txInteractsWithContract } from './utils'
 
 export interface ParserArgs {
-  network: Network
+  chainId: ChainId
   provider: ethers.providers.JsonRpcProvider
 }
 
 export class Parser implements SubParser {
-  network: Network
   provider: ethers.providers.JsonRpcProvider
 
+  readonly chainId: ChainId
   readonly wethContract: string
   readonly abiInterface = new ethers.utils.Interface(UNIV2_ABI)
 
@@ -28,13 +27,19 @@ export class Parser implements SubParser {
   }
 
   constructor(args: ParserArgs) {
-    this.network = args.network
+    this.chainId = args.chainId
     this.provider = args.provider
 
-    this.wethContract = {
-      mainnet: WETH_CONTRACT_MAINNET,
-      ropsten: WETH_CONTRACT_ROPSTEN
-    }[this.network]
+    switch (args.chainId) {
+      case 'eip155:1':
+        this.wethContract = WETH_CONTRACT_MAINNET
+        break
+      case 'eip155:3':
+        this.wethContract = WETH_CONTRACT_ROPSTEN
+        break
+      default:
+        throw new Error('chainId is not supported. (supported chainIds: eip155:1, eip155:3)')
+    }
   }
 
   async parse(tx: BlockbookTx): Promise<TxSpecific | undefined> {
@@ -66,9 +71,8 @@ export class Parser implements SubParser {
           const symbol = await contract.symbol()
           const value = decoded.args.amountTokenDesired.toString()
 
-          const assetId = toCAIP19({
-            chain: ChainTypes.Ethereum,
-            network: toNetworkType(this.network),
+          const assetId = toAssetId({
+            ...fromChainId(this.chainId),
             assetNamespace: AssetNamespace.ERC20,
             assetReference: tokenAddress
           })
@@ -78,7 +82,6 @@ export class Parser implements SubParser {
               type: TransferType.Send,
               from: sendAddress,
               to: lpTokenAddress,
-              caip19: assetId,
               assetId,
               totalValue: value,
               components: [{ value }],
@@ -93,9 +96,8 @@ export class Parser implements SubParser {
           const symbol = await contract.symbol()
           const value = decoded.args.liquidity.toString()
 
-          const assetId = toCAIP19({
-            chain: ChainTypes.Ethereum,
-            network: toNetworkType(this.network),
+          const assetId = toAssetId({
+            ...fromChainId(this.chainId),
             assetNamespace: AssetNamespace.ERC20,
             assetReference: lpTokenAddress
           })
@@ -105,7 +107,6 @@ export class Parser implements SubParser {
               type: TransferType.Send,
               from: sendAddress,
               to: lpTokenAddress,
-              caip19: assetId,
               assetId,
               totalValue: value,
               components: [{ value }],
diff --git a/packages/unchained-client/src/ethereum/parser/utils.ts b/packages/unchained-client/src/ethereum/parser/utils.ts
index a9fc1c2..fe533e9 100644
--- a/packages/unchained-client/src/ethereum/parser/utils.ts
+++ b/packages/unchained-client/src/ethereum/parser/utils.ts
@@ -1,21 +1,8 @@
 import { Tx as BlockbookTx } from '@shapeshiftoss/blockbook'
-import { NetworkTypes } from '@shapeshiftoss/types'
 import { ethers } from 'ethers'
 
-import { Network } from '../types'
 import MULTISIG_ABI from './abi/multiSig'
 
-export const toNetworkType = (network: Network): NetworkTypes => {
-  switch (network) {
-    case 'mainnet':
-      return NetworkTypes.MAINNET
-    case 'ropsten':
-      return NetworkTypes.ETH_ROPSTEN
-    default:
-      throw new Error('unsupported network')
-  }
-}
-
 export const getSigHash = (inputData: string | undefined): string | undefined => {
   if (!inputData) return
   const length = inputData.startsWith('0x') ? 10 : 8
diff --git a/packages/unchained-client/src/ethereum/parser/weth.ts b/packages/unchained-client/src/ethereum/parser/weth.ts
index d1b919f..3c0ec89 100644
--- a/packages/unchained-client/src/ethereum/parser/weth.ts
+++ b/packages/unchained-client/src/ethereum/parser/weth.ts
@@ -1,24 +1,23 @@
 import { Tx as BlockbookTx } from '@shapeshiftoss/blockbook'
-import { AssetNamespace, toCAIP19 } from '@shapeshiftoss/caip'
-import { ChainTypes } from '@shapeshiftoss/types'
+import { AssetNamespace, ChainId, fromChainId, toAssetId } from '@shapeshiftoss/caip'
 import { ethers } from 'ethers'
 
 import { TransferType, TxParser } from '../../types'
-import { Network, SubParser, TxSpecific } from '../types'
+import { SubParser, TxSpecific } from '../types'
 import ERC20_ABI from './abi/erc20'
 import WETH_ABI from './abi/weth'
 import { WETH_CONTRACT_MAINNET, WETH_CONTRACT_ROPSTEN } from './constants'
-import { getSigHash, toNetworkType, txInteractsWithContract } from './utils'
+import { getSigHash, txInteractsWithContract } from './utils'
 
 export interface ParserArgs {
-  network: Network
+  chainId: ChainId
   provider: ethers.providers.JsonRpcProvider
 }
 
 export class Parser implements SubParser {
   provider: ethers.providers.JsonRpcProvider
 
-  readonly network: Network
+  readonly chainId: ChainId
   readonly wethContract: string
   readonly abiInterface = new ethers.utils.Interface(WETH_ABI)
 
@@ -28,13 +27,19 @@ export class Parser implements SubParser {
   }
 
   constructor(args: ParserArgs) {
-    this.network = args.network
+    this.chainId = args.chainId
     this.provider = args.provider
 
-    this.wethContract = {
-      mainnet: WETH_CONTRACT_MAINNET,
-      ropsten: WETH_CONTRACT_ROPSTEN
-    }[this.network]
+    switch (args.chainId) {
+      case 'eip155:1':
+        this.wethContract = WETH_CONTRACT_MAINNET
+        break
+      case 'eip155:3':
+        this.wethContract = WETH_CONTRACT_ROPSTEN
+        break
+      default:
+        throw new Error('chainId is not supported. (supported chainIds: eip155:1, eip155:3)')
+    }
   }
 
   async parse(tx: BlockbookTx): Promise<TxSpecific | undefined> {
@@ -55,9 +60,8 @@ export class Parser implements SubParser {
     const sendAddress = tx.vin[0].addresses?.[0] ?? ''
     const contract = new ethers.Contract(this.wethContract, ERC20_ABI, this.provider)
 
-    const assetId = toCAIP19({
-      chain: ChainTypes.Ethereum,
-      network: toNetworkType(this.network),
+    const assetId = toAssetId({
+      ...fromChainId(this.chainId),
       assetNamespace: AssetNamespace.ERC20,
       assetReference: this.wethContract
     })
@@ -77,7 +81,6 @@ export class Parser implements SubParser {
               type: TransferType.Receive,
               from: this.wethContract,
               to: sendAddress,
-              caip19: assetId,
               assetId,
               totalValue: tx.value,
               components: [{ value: tx.value }],
@@ -91,7 +94,6 @@ export class Parser implements SubParser {
               type: TransferType.Send,
               from: sendAddress,
               to: this.wethContract,
-              caip19: assetId,
               assetId,
               totalValue: decoded.args.wad.toString(),
               components: [{ value: decoded.args.wad.toString() }],
diff --git a/packages/unchained-client/src/ethereum/parser/yearn.ts b/packages/unchained-client/src/ethereum/parser/yearn.ts
index 4fd2681..829fbad 100644
--- a/packages/unchained-client/src/ethereum/parser/yearn.ts
+++ b/packages/unchained-client/src/ethereum/parser/yearn.ts
@@ -1,22 +1,23 @@
 import { Tx as BlockbookTx } from '@shapeshiftoss/blockbook'
-import { ChainId, Yearn } from '@yfi/sdk'
+import { ChainId } from '@shapeshiftoss/caip'
+import { ChainId as YearnChainId, Yearn } from '@yfi/sdk'
 import { ethers } from 'ethers'
 
 import { TxParser } from '../../types'
-import { Network, SubParser, TxSpecific } from '../types'
+import { SubParser, TxSpecific } from '../types'
 import shapeShiftRouter from './abi/shapeShiftRouter'
 import yearnVault from './abi/yearnVault'
 import { SHAPE_SHIFT_ROUTER_CONTRACT } from './constants'
 import { getSigHash } from './utils'
 
 interface ParserArgs {
-  network: Network
+  chainId: ChainId
   provider: ethers.providers.JsonRpcProvider
 }
 
 export class Parser implements SubParser {
   provider: ethers.providers.JsonRpcProvider
-  yearnSdk: Yearn<ChainId> | undefined
+  yearnSdk: Yearn<YearnChainId> | undefined
   yearnTokenVaultAddresses: string[] | undefined
 
   readonly shapeShiftInterface = new ethers.utils.Interface(shapeShiftRouter)
@@ -38,7 +39,7 @@ export class Parser implements SubParser {
     this.provider = args.provider
 
     // The only Yearn-supported chain we currently support is mainnet
-    if (args.network === 'mainnet') {
+    if (args.chainId === 'eip155:1') {
       // 1 for EthMain (@yfi/sdk/dist/chain.d.ts)
       this.yearnSdk = new Yearn(1, { provider: this.provider })
     }
diff --git a/packages/unchained-client/src/ethereum/types.ts b/packages/unchained-client/src/ethereum/types.ts
index 9fb6b78..fab0cae 100644
--- a/packages/unchained-client/src/ethereum/types.ts
+++ b/packages/unchained-client/src/ethereum/types.ts
@@ -25,8 +25,6 @@ export interface ParsedTx extends StandardTx {
 
 export type TxSpecific = Partial<Pick<ParsedTx, 'trade' | 'transfers' | 'data'>>
 
-export type Network = 'mainnet' | 'ropsten'
-
 export interface SubParser {
   parse(tx: BlockbookTx): Promise<TxSpecific | undefined>
 }
diff --git a/packages/unchained-client/src/types.ts b/packages/unchained-client/src/types.ts
index 8747ae0..193a9ec 100644
--- a/packages/unchained-client/src/types.ts
+++ b/packages/unchained-client/src/types.ts
@@ -4,10 +4,6 @@ export enum Dex {
 }
 
 export interface Fee {
-  /**
-   * @deprecated use 'assetId' instead
-   */
-  caip19: string
   assetId: string
   value: string
 }
@@ -40,10 +36,6 @@ export enum TradeType {
 export interface Transfer {
   from: string
   to: string
-  /**
-   * @deprecated use 'assetId' instead
-   */
-  caip19: string
   assetId: string
   type: TransferType
   totalValue: string
@@ -76,10 +68,6 @@ export interface StandardTx {
   blockHash?: string
   blockHeight: number
   blockTime: number
-  /**
-   * @deprecated use 'chainId' instead
-   */
-  caip2: string
   chainId: string
   confirmations: number
   fee?: Fee
diff --git a/packages/unchained-client/src/utils.ts b/packages/unchained-client/src/utils.ts
index e9652ce..09a3c5b 100644
--- a/packages/unchained-client/src/utils.ts
+++ b/packages/unchained-client/src/utils.ts
@@ -41,7 +41,6 @@ export function aggregateTransfer(
       ...transfers,
       {
         type,
-        caip19: assetId,
         assetId,
         from,
         to,
